# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from agent_proto import agent_pb2 as agent__proto_dot_agent__pb2

GRPC_GENERATED_VERSION = '1.73.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in agent_proto/agent_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class AgentServiceStub(object):
    """事件服务定义
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterWorker = channel.unary_unary(
                '/agent.AgentService/RegisterWorker',
                request_serializer=agent__proto_dot_agent__pb2.RegisterWorkerRequest.SerializeToString,
                response_deserializer=agent__proto_dot_agent__pb2.RegisterWorkerResponse.FromString,
                _registered_method=True)
        self.Heartbeat = channel.unary_unary(
                '/agent.AgentService/Heartbeat',
                request_serializer=agent__proto_dot_agent__pb2.HeartbeatRequest.SerializeToString,
                response_deserializer=agent__proto_dot_agent__pb2.HeartbeatResponse.FromString,
                _registered_method=True)
        self.CreateAgent = channel.unary_unary(
                '/agent.AgentService/CreateAgent',
                request_serializer=agent__proto_dot_agent__pb2.CreateAgentRequest.SerializeToString,
                response_deserializer=agent__proto_dot_agent__pb2.CreateAgentResponse.FromString,
                _registered_method=True)
        self.SendEvent = channel.unary_unary(
                '/agent.AgentService/SendEvent',
                request_serializer=agent__proto_dot_agent__pb2.EventRequest.SerializeToString,
                response_deserializer=agent__proto_dot_agent__pb2.EventResponse.FromString,
                _registered_method=True)
        self.CreateAgentsBatch = channel.unary_unary(
                '/agent.AgentService/CreateAgentsBatch',
                request_serializer=agent__proto_dot_agent__pb2.CreateAgentsBatchRequest.SerializeToString,
                response_deserializer=agent__proto_dot_agent__pb2.CreateAgentsBatchResponse.FromString,
                _registered_method=True)
        self.SendStorageEvent = channel.unary_unary(
                '/agent.AgentService/SendStorageEvent',
                request_serializer=agent__proto_dot_agent__pb2.StorageEventRequest.SerializeToString,
                response_deserializer=agent__proto_dot_agent__pb2.StorageEventResponse.FromString,
                _registered_method=True)
        self.SendStorageEventBatch = channel.unary_unary(
                '/agent.AgentService/SendStorageEventBatch',
                request_serializer=agent__proto_dot_agent__pb2.StorageEventBatchRequest.SerializeToString,
                response_deserializer=agent__proto_dot_agent__pb2.StorageEventBatchResponse.FromString,
                _registered_method=True)
        self.SendDecisionRecord = channel.unary_unary(
                '/agent.AgentService/SendDecisionRecord',
                request_serializer=agent__proto_dot_agent__pb2.DecisionRecordRequest.SerializeToString,
                response_deserializer=agent__proto_dot_agent__pb2.DecisionRecordResponse.FromString,
                _registered_method=True)
        self.SendDecisionRecordBatch = channel.unary_unary(
                '/agent.AgentService/SendDecisionRecordBatch',
                request_serializer=agent__proto_dot_agent__pb2.DecisionRecordBatchRequest.SerializeToString,
                response_deserializer=agent__proto_dot_agent__pb2.DecisionRecordBatchResponse.FromString,
                _registered_method=True)
        self.GetEnvData = channel.unary_unary(
                '/agent.AgentService/GetEnvData',
                request_serializer=agent__proto_dot_agent__pb2.EnvDataRequest.SerializeToString,
                response_deserializer=agent__proto_dot_agent__pb2.EnvDataResponse.FromString,
                _registered_method=True)
        self.UpdateEnvData = channel.unary_unary(
                '/agent.AgentService/UpdateEnvData',
                request_serializer=agent__proto_dot_agent__pb2.EnvDataUpdateRequest.SerializeToString,
                response_deserializer=agent__proto_dot_agent__pb2.EnvDataUpdateResponse.FromString,
                _registered_method=True)
        self.StopSimulation = channel.unary_unary(
                '/agent.AgentService/StopSimulation',
                request_serializer=agent__proto_dot_agent__pb2.SimulationStopRequest.SerializeToString,
                response_deserializer=agent__proto_dot_agent__pb2.SimulationStopResponse.FromString,
                _registered_method=True)
        self.GetAgentData = channel.unary_unary(
                '/agent.AgentService/GetAgentData',
                request_serializer=agent__proto_dot_agent__pb2.AgentDataRequest.SerializeToString,
                response_deserializer=agent__proto_dot_agent__pb2.AgentDataResponse.FromString,
                _registered_method=True)
        self.GetAgentDataByType = channel.unary_unary(
                '/agent.AgentService/GetAgentDataByType',
                request_serializer=agent__proto_dot_agent__pb2.AgentDataByTypeRequest.SerializeToString,
                response_deserializer=agent__proto_dot_agent__pb2.AgentDataByTypeResponse.FromString,
                _registered_method=True)
        self.GetTokenUsage = channel.unary_unary(
                '/agent.AgentService/GetTokenUsage',
                request_serializer=agent__proto_dot_agent__pb2.TokenUsageRequest.SerializeToString,
                response_deserializer=agent__proto_dot_agent__pb2.TokenUsageResponse.FromString,
                _registered_method=True)
        self.LocateAgent = channel.unary_unary(
                '/agent.AgentService/LocateAgent',
                request_serializer=agent__proto_dot_agent__pb2.LocateAgentRequest.SerializeToString,
                response_deserializer=agent__proto_dot_agent__pb2.LocateAgentResponse.FromString,
                _registered_method=True)
        self.CollectDataBatch = channel.unary_unary(
                '/agent.AgentService/CollectDataBatch',
                request_serializer=agent__proto_dot_agent__pb2.BatchDataRequest.SerializeToString,
                response_deserializer=agent__proto_dot_agent__pb2.BatchDataResponse.FromString,
                _registered_method=True)


class AgentServiceServicer(object):
    """事件服务定义
    """

    def RegisterWorker(self, request, context):
        """注册worker节点
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Heartbeat(self, request, context):
        """心跳服务
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateAgent(self, request, context):
        """在worker上创建agent
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendEvent(self, request, context):
        """发送事件
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateAgentsBatch(self, request, context):
        """批量创建agents
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendStorageEvent(self, request, context):
        """发送数据存储事件
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendStorageEventBatch(self, request, context):
        """批量发送数据存储事件
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendDecisionRecord(self, request, context):
        """发送决策记录
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendDecisionRecordBatch(self, request, context):
        """批量发送决策记录
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEnvData(self, request, context):
        """获取环境数据
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateEnvData(self, request, context):
        """更新环境数据
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopSimulation(self, request, context):
        """请求停止仿真
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAgentData(self, request, context):
        """获取Agent数据
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAgentDataByType(self, request, context):
        """获取指定类型的Agent数据
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTokenUsage(self, request, context):
        """获取节点的Token使用情况
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LocateAgent(self, request, context):
        """定位Agent所在Worker
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CollectDataBatch(self, request, context):
        """Master向Worker批量收集数据
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AgentServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterWorker': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterWorker,
                    request_deserializer=agent__proto_dot_agent__pb2.RegisterWorkerRequest.FromString,
                    response_serializer=agent__proto_dot_agent__pb2.RegisterWorkerResponse.SerializeToString,
            ),
            'Heartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.Heartbeat,
                    request_deserializer=agent__proto_dot_agent__pb2.HeartbeatRequest.FromString,
                    response_serializer=agent__proto_dot_agent__pb2.HeartbeatResponse.SerializeToString,
            ),
            'CreateAgent': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAgent,
                    request_deserializer=agent__proto_dot_agent__pb2.CreateAgentRequest.FromString,
                    response_serializer=agent__proto_dot_agent__pb2.CreateAgentResponse.SerializeToString,
            ),
            'SendEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.SendEvent,
                    request_deserializer=agent__proto_dot_agent__pb2.EventRequest.FromString,
                    response_serializer=agent__proto_dot_agent__pb2.EventResponse.SerializeToString,
            ),
            'CreateAgentsBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAgentsBatch,
                    request_deserializer=agent__proto_dot_agent__pb2.CreateAgentsBatchRequest.FromString,
                    response_serializer=agent__proto_dot_agent__pb2.CreateAgentsBatchResponse.SerializeToString,
            ),
            'SendStorageEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.SendStorageEvent,
                    request_deserializer=agent__proto_dot_agent__pb2.StorageEventRequest.FromString,
                    response_serializer=agent__proto_dot_agent__pb2.StorageEventResponse.SerializeToString,
            ),
            'SendStorageEventBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.SendStorageEventBatch,
                    request_deserializer=agent__proto_dot_agent__pb2.StorageEventBatchRequest.FromString,
                    response_serializer=agent__proto_dot_agent__pb2.StorageEventBatchResponse.SerializeToString,
            ),
            'SendDecisionRecord': grpc.unary_unary_rpc_method_handler(
                    servicer.SendDecisionRecord,
                    request_deserializer=agent__proto_dot_agent__pb2.DecisionRecordRequest.FromString,
                    response_serializer=agent__proto_dot_agent__pb2.DecisionRecordResponse.SerializeToString,
            ),
            'SendDecisionRecordBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.SendDecisionRecordBatch,
                    request_deserializer=agent__proto_dot_agent__pb2.DecisionRecordBatchRequest.FromString,
                    response_serializer=agent__proto_dot_agent__pb2.DecisionRecordBatchResponse.SerializeToString,
            ),
            'GetEnvData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEnvData,
                    request_deserializer=agent__proto_dot_agent__pb2.EnvDataRequest.FromString,
                    response_serializer=agent__proto_dot_agent__pb2.EnvDataResponse.SerializeToString,
            ),
            'UpdateEnvData': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateEnvData,
                    request_deserializer=agent__proto_dot_agent__pb2.EnvDataUpdateRequest.FromString,
                    response_serializer=agent__proto_dot_agent__pb2.EnvDataUpdateResponse.SerializeToString,
            ),
            'StopSimulation': grpc.unary_unary_rpc_method_handler(
                    servicer.StopSimulation,
                    request_deserializer=agent__proto_dot_agent__pb2.SimulationStopRequest.FromString,
                    response_serializer=agent__proto_dot_agent__pb2.SimulationStopResponse.SerializeToString,
            ),
            'GetAgentData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAgentData,
                    request_deserializer=agent__proto_dot_agent__pb2.AgentDataRequest.FromString,
                    response_serializer=agent__proto_dot_agent__pb2.AgentDataResponse.SerializeToString,
            ),
            'GetAgentDataByType': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAgentDataByType,
                    request_deserializer=agent__proto_dot_agent__pb2.AgentDataByTypeRequest.FromString,
                    response_serializer=agent__proto_dot_agent__pb2.AgentDataByTypeResponse.SerializeToString,
            ),
            'GetTokenUsage': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTokenUsage,
                    request_deserializer=agent__proto_dot_agent__pb2.TokenUsageRequest.FromString,
                    response_serializer=agent__proto_dot_agent__pb2.TokenUsageResponse.SerializeToString,
            ),
            'LocateAgent': grpc.unary_unary_rpc_method_handler(
                    servicer.LocateAgent,
                    request_deserializer=agent__proto_dot_agent__pb2.LocateAgentRequest.FromString,
                    response_serializer=agent__proto_dot_agent__pb2.LocateAgentResponse.SerializeToString,
            ),
            'CollectDataBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.CollectDataBatch,
                    request_deserializer=agent__proto_dot_agent__pb2.BatchDataRequest.FromString,
                    response_serializer=agent__proto_dot_agent__pb2.BatchDataResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'agent.AgentService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('agent.AgentService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AgentService(object):
    """事件服务定义
    """

    @staticmethod
    def RegisterWorker(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/agent.AgentService/RegisterWorker',
            agent__proto_dot_agent__pb2.RegisterWorkerRequest.SerializeToString,
            agent__proto_dot_agent__pb2.RegisterWorkerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Heartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/agent.AgentService/Heartbeat',
            agent__proto_dot_agent__pb2.HeartbeatRequest.SerializeToString,
            agent__proto_dot_agent__pb2.HeartbeatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateAgent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/agent.AgentService/CreateAgent',
            agent__proto_dot_agent__pb2.CreateAgentRequest.SerializeToString,
            agent__proto_dot_agent__pb2.CreateAgentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/agent.AgentService/SendEvent',
            agent__proto_dot_agent__pb2.EventRequest.SerializeToString,
            agent__proto_dot_agent__pb2.EventResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateAgentsBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/agent.AgentService/CreateAgentsBatch',
            agent__proto_dot_agent__pb2.CreateAgentsBatchRequest.SerializeToString,
            agent__proto_dot_agent__pb2.CreateAgentsBatchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendStorageEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/agent.AgentService/SendStorageEvent',
            agent__proto_dot_agent__pb2.StorageEventRequest.SerializeToString,
            agent__proto_dot_agent__pb2.StorageEventResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendStorageEventBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/agent.AgentService/SendStorageEventBatch',
            agent__proto_dot_agent__pb2.StorageEventBatchRequest.SerializeToString,
            agent__proto_dot_agent__pb2.StorageEventBatchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendDecisionRecord(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/agent.AgentService/SendDecisionRecord',
            agent__proto_dot_agent__pb2.DecisionRecordRequest.SerializeToString,
            agent__proto_dot_agent__pb2.DecisionRecordResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendDecisionRecordBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/agent.AgentService/SendDecisionRecordBatch',
            agent__proto_dot_agent__pb2.DecisionRecordBatchRequest.SerializeToString,
            agent__proto_dot_agent__pb2.DecisionRecordBatchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetEnvData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/agent.AgentService/GetEnvData',
            agent__proto_dot_agent__pb2.EnvDataRequest.SerializeToString,
            agent__proto_dot_agent__pb2.EnvDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateEnvData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/agent.AgentService/UpdateEnvData',
            agent__proto_dot_agent__pb2.EnvDataUpdateRequest.SerializeToString,
            agent__proto_dot_agent__pb2.EnvDataUpdateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StopSimulation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/agent.AgentService/StopSimulation',
            agent__proto_dot_agent__pb2.SimulationStopRequest.SerializeToString,
            agent__proto_dot_agent__pb2.SimulationStopResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAgentData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/agent.AgentService/GetAgentData',
            agent__proto_dot_agent__pb2.AgentDataRequest.SerializeToString,
            agent__proto_dot_agent__pb2.AgentDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAgentDataByType(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/agent.AgentService/GetAgentDataByType',
            agent__proto_dot_agent__pb2.AgentDataByTypeRequest.SerializeToString,
            agent__proto_dot_agent__pb2.AgentDataByTypeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTokenUsage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/agent.AgentService/GetTokenUsage',
            agent__proto_dot_agent__pb2.TokenUsageRequest.SerializeToString,
            agent__proto_dot_agent__pb2.TokenUsageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LocateAgent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/agent.AgentService/LocateAgent',
            agent__proto_dot_agent__pb2.LocateAgentRequest.SerializeToString,
            agent__proto_dot_agent__pb2.LocateAgentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CollectDataBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/agent.AgentService/CollectDataBatch',
            agent__proto_dot_agent__pb2.BatchDataRequest.SerializeToString,
            agent__proto_dot_agent__pb2.BatchDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
