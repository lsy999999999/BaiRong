{
    "domain": "Economics",
    "scene_name": "decentralized_property_rights_on_homogeneous_mining_grid",
    "odd_protocol": {
        "overview": {
            "system_goal": "Simulate homogeneous miner agents on a homogeneous 10×10 grid to study decentralized property-rights formation without communication or authority and its impact on distribution, stability, conflict, and efficiency; evaluate whether stable holdings and high productive efficiency emerge under a stamina-budgeted, cap-limited, nondepleting resource extraction regime; agents individually optimize personal cumulative gold while the system tracks aggregate efficiency and equity outcomes.",
            "agent_types": "N homogeneous miner agents (LLM-driven, no communication, no authority) each round receive stamina S=10 that resets and cannot be carried over; agents allocate integer stamina across per-plot claim, raid, defend, and mine decisions; the agent objective is strictly personal cumulative gold maximization (智能体优化自己的累计金币).",
            "environment_description": "A 10×10 lattice of 100 identical plots, nondepleting resources with a fixed per-plot per-round extraction cap; no terrain heterogeneity and no spatial externalities beyond ownership and targeting rules; ownership transitions are stamina-mediated with explicit claim and raid mechanics.",
            "grid_and_indexing_scheme": "Grid is 10×10 with zero-based rows and columns: r in [0,9], c in [0,9]; row-major index idx(r,c)=10*r+c; default ascending order is 0,1,2,…,99 and default descending is 99,…,1,0; in this protocol, whenever a procedure says 'scan in descending order', it means scan idx from 99 down to 0; unifying index order removes ambiguity such as 'drop left or right first' or 'up or down first'.",
            "resource_and_production_cap": "Per-plot per-round output is capped at 3 gold; a miner may invest mine[r,c] in {0,1,2,3} on an owned plot with linear mapping 0->0, 1->1, 2->2, 3->3.",
            "property_rights_and_ownership_model": "No communication and no centralized authority; property is established and contested via stamina-based claims and raids; claiming an unowned-at-start plot requires spending exactly 1 stamina with a uniform random selection among claimants; raiding an owned-at-start plot costs exactly 1 stamina per raider; owners may precommit exactly 0 or 1 stamina per owned plot as defense; block-all defense rule: if defend[r,c]=1 then all raids on that plot fail and the incumbent remains owner; if defend[r,c]=0 and one or more raiders target the plot, exactly one raider is chosen uniformly at random to become the new owner; all claim and raid stamina costs are paid regardless of success.",
            "initial_conditions_and_first_round_rules": "At round 1 all plots are unowned (第一轮初始化所有地块无主), all miners start with 0 gold (矿工有0个金币), and the first round cannot include mining payouts (第一轮无法开采) because no agent owns any plot at the start of round 1; newly acquired plots via claim or raid begin producing only from the next round.",
            "observability_and_memory_policy": "Minimal public information with short memory (最小公开信息 + 短记忆); each agent observes the current ownership grid and the previous round’s public outcomes only; public outcomes for the previous round include, for each plot, whether it was raided and the result including the identity of the winning party when a raid occurred (上一轮每块地是否遭到抢占/结果（谁赢）); privately, each agent also sees its own previous round actions and payoff (自己上轮的行动与收益); agents do not observe others’ current-round defense precommits or stamina allocations and do not retain cross-round private long-term memory.",
            "efficiency_benchmark_and_targets": "The efficiency upper bound assumes zero stamina spent on raiding or defense, no contention losses, and all feasible stamina deployed to mining under the s_max=3 per-plot cap; realized cumulative output is compared to this bound with a target ratio of 80%–90%, acknowledging that raids, defense, forfeited mining on lost plots, and tie-break losses reduce productive efficiency.",
            "replication_and_runs": "Run both N=10 and N=20 settings; time horizon H=100 with robustness runs at R=200; use fixed random seeds and repeat across at least 30 distinct seeds for robustness and reproducibility; deterministic budget sanitization is the default with an optional labeled random-adjustment variant for sensitivity."
        },
        "design_concepts": {
            "interaction_patterns": "Each round is simultaneous-move with a deterministic three-stage resolution: Stage A (Commit) agents submit per-plot integer allocations within S=10 across claim[r,c], raid[r,c], defend[r,c], and mine[r,c]; Stage B (Ownership transitions) resolves claims and then raids with block-all defense; Stage C (Mining payouts) pays mining only on plots owned at the start and still owned after Stage B; newly acquired plots in the current round do not produce this round; the first round has no mining because all plots start unowned.",
            "communication_protocols": "No communication and no coordinating authority are permitted; decisions are private and simultaneous; public observables are minimized and limited to a one-round window: current ownership grid and the previous round’s plot-level contest flags and raid results including the identity of the winner; defense choices remain private and are never directly revealed; others’ current-round stamina allocations are not observable.",
            "decision_mechanisms": "Agents privately allocate integer stamina in per-plot action vectors constrained by S=10, anticipating block-all defense, uniform random tie-breaks, and incomplete information; claim and raid cost exactly 1 per targeted plot and pay regardless of success; defense precommit costs 1 per owned plot if retained; mining on owned plots yields linear output up to 3; agents must respect the short-memory observables.",
            "conflict_resolution_scheme": "Claims on unowned-at-start plots: if m≥1 agents spend 1 stamina to target the same unowned plot, exactly one is chosen uniformly at random to become owner and all claimants pay the 1 stamina; raids on owned-at-start plots under block-all defense: if defend[r,c]=1, all raids fail and the incumbent remains; if defend[r,c]=0 and r≥1 raiders exist, select exactly one raider uniformly to become the new owner; all raid stamina costs are paid regardless of success.",
            "targeting_domain_rule": "Claims may only target plots unowned at the start of the round; raids may only target plots owned at the start of the round; defense can only defend a plot the agent already owns (防御只能防御自己已经有的这块土地); this removes ambiguity about simultaneous claim and raid on the same plot.",
            "uncertainty_and_incomplete_information": "Agents do not know others’ current-round defense or stamina allocations; defense choices are private; tie-breakers are uniform random; only last-round public outcomes and current ownership are known; this induces strategic uncertainty under strong block-all defense and short-memory constraints.",
            "reproducibility_and_random_seeds": "Use fixed random seeds with at least 30 runs per N configuration; over-budget clipping is deterministic and contains no randomness so the same input and world state produce the same result; a labeled alternative parser mode using random reasonable adjustments may be enabled for sensitivity but is not the default.",
            "indexing_and_traversal_policy": "Row-major indexing idx(r,c)=10*r+c with r in [0,9], c in [0,9]; ascending traversal means 0→99 and descending traversal means 99→0; wherever the protocol says 'scan in descending order', it means iterate idx from 99 down to 0; normalization explicitly traverses in ascending order once."
        },
        "details": {
            "agent_behaviors": "Per round, each agent observes the current ownership of all plots, the previous round’s public outcomes indicating per-plot whether a raid occurred and the result including who won, and the agent’s own previous round actions and payoff; based on these and stamina S=10, agents choose per-plot discrete actions claim[r,c] in {0,1}, raid[r,c] in {0,1}, defend[r,c] in {0,1}, and mine[r,c] in {0,1,2,3}, subject to ownership legality, targeting rules, and budget; duplicate same-plot choices by design are binary per plot; only mining on plots owned at the start and still owned after Stage B yields output for that round; newly acquired plots via claim or raid do not produce until the next round; in round 1 no mining is possible because all plots are unowned at initialization and miners have 0 gold.",
            "decision_algorithms": "No specific algorithm is mandated; agents are LLM-driven and may use heuristic, myopic, or forward-looking strategies constrained by short memory; they may condition only on current ownership, last-round plot-level contest and winner information, and their own last-round actions and payoff; they must produce feasible integer per-plot allocations that satisfy S after deterministic normalization and clipping; randomized choices may be used by agents to break symmetry in their planning, but budget clipping and sanitation remain deterministic.",
            "specific_constraints": "Per-round stamina budget S=10 cannot be exceeded or carried over; per-plot mining allocation cap s_max=3 with linear output 0→0,1→1,2→2,3→3; claim cost=1 with exactly 1 required; raid cost=1 with exactly 1 required; defense precommit cost=1 per owned plot if retained; defense can only defend plots already owned; targeting rule prohibits claims on owned-at-start plots and raids on unowned-at-start plots; per-plot actions are integers only; decimals are not allowed; tie-breakers are uniform random; newly acquired plots do not yield production for the acquirer until the next round; stamina resets to S after each round.",
            "action_vector_representation_and_budget_accounting": "Each agent submits four per-cell action layers: claim[r,c]∈{0,1}, raid[r,c]∈{0,1}, defend[r,c]∈{0,1}, mine[r,c]∈{0,1,2,3}; raw budget consumption is Craw = sum_over_cells(claim) + sum_over_cells(raid) + sum_over_cells(defend) + sum_over_cells(mine); if Craw ≤ S after normalization, the submission is accepted; otherwise deterministic over-budget clipping is applied.",
            "submission_normalization_pre_clipping": "Before clipping, perform a single deterministic normalization pass over all cells in ascending idx order (0→99); for each cell, enforce ownership legality by zeroing illegal actions so they do not count toward the budget: if the cell is currently unowned then set raid=0, defend=0, mine=0 while claim may be 0/1; if the cell is currently owned by the submitting agent then set claim=0, raid=0 while defend in {0,1} and mine in [0,3] are allowed; if the cell is currently owned by another agent then set claim=0, defend=0, mine=0 while raid may be 0/1; if mutually exclusive conflicts remain in a single cell (e.g., dirty input simultaneously sets claim and raid), clear illegal bits per the ownership rules above and if any conflict still persists then set claim=raid=defend=mine=0 for that cell; after this pass recompute Craw; if Craw ≤ S, accept without clipping.",
            "over_budget_clipping_policy_and_determinism": "If Craw remains > S after normalization, apply deterministic over-budget clipping with no randomness; the exact clipping order is decided by the large model policy in this specification (由大模型决定), but must be deterministic so that the same input and world state always yield the same clipped result; defense is a pre-commit cost but is only charged if defend[r,c] remains 1 after clipping, i.e., items clipped to 0 are not billed; normalization often reduces Craw to ≤ S and can avoid clipping; it is recommended to log every clipped idx along with the action type and the amount trimmed to enable auditing and paper reproduction; if an implementation elects to use a baseline fallback, a previously used deterministic order is: reduce mining (starting from largest per-plot assignments), then drop excess raids, then drop excess claims, with defense previously not auto-dropped, but in this variant the model-chosen order supersedes and may clip defense as well as other actions so long as the process remains deterministic.",
            "round_sequence_and_timing": "Stage A (Commit): agents submit per-plot claim, raid, defend, and mine subject to S=10; perform normalization then, if needed, deterministic clipping; Stage B (Ownership transitions): resolve claims on unowned-at-start plots by uniform random selection among 1-stamina claimants with all claimants paying cost, then resolve raids under block-all defense where defend[r,c]=1 blocks all raiders and defend[r,c]=0 with r≥1 raiders selects exactly one uniformly as new owner with all raiders paying cost; Stage C (Mining payouts): pay only for mining assigned to plots owned by the miner at the start and still owned after Stage B with per-plot payout equal to min(mine[r,c],3) using mapping 0→0,1→1,2→2,3→3; newly acquired plots do not pay this round; after payouts, record minimal public logging for the last round and reset stamina.",
            "tie_breaking_and_conflict_handling": "Multiple claimants to an unowned-at-start plot: choose exactly one winner uniformly at random with all claimants paying 1 stamina; under defend[r,c]=0 with r≥1 raiders: choose exactly one raider uniformly to become the new owner with all raiders paying 1 stamina; under defend[r,c]=1: all raids fail; within a single agent’s per-cell submission, normalization clears illegal or mutually exclusive entries and, if unresolved, zeros the entire cell’s actions.",
            "budget_validation_and_sanitization_pipeline": "Pipeline is: receive per-plot integer action layers → enforce hard legality via ascending-order normalization (zero illegal items and resolve cell-level conflicts) → compute Craw = sum(claim)+sum(raid)+sum(defend)+sum(mine) → if Craw ≤ S accept, else apply deterministic over-budget clipping as decided by the large model policy until budget ≤ S → defense cost is charged only if defend[r,c]=1 remains after clipping; the clipping step contains no randomness; when any procedure requires 'scan descending', iterate idx from 99 down to 0.",
            "observability_public_history_privacy_and_logging": "After each round the system publicly reveals the updated ownership grid and, for each plot, whether it was contested by claim or raid in the previous round and, if a raid occurred, the identity of the winner; defense choices remain private and are never directly revealed; others’ current-round stamina allocations are unobserved; public history is strictly limited to a one-round window (最小公开信息), and agents do not receive or retain cross-round long logs; for auditing and replication it is recommended to record deterministic clipping logs including the idx, action type (claim/raid/defend/mine), and the clipped quantity.",
            "quantitative_parameters_and_defaults": "Grid size 10×10=100 plots; indices r in [0,9], c in [0,9], idx=10*r+c; player counts N in {10,20}; baseline horizon H=100 with robustness runs at R=200; per-round stamina S=10; per-plot mining cap s_max=3; output rate q=1 with mapping 0→0,1→1,2→2,3→3; raid cost=1; claim cost=1; defense precommit cost=1 if retained; block-all defense is the main specification; tie-breakers equal probability; fixed random seeds with ≥30 runs per N configuration.",
            "validation_rule_and_domain_bounds": "Reject references to plots outside the allowed domain; preserve the rule '拒绝超出N个地块的其他土地' operationalized as rejecting any land indices beyond the defined set of valid plots (by default the 10×10 grid indices 0..99, with r in [0,9] and c in [0,9]); any out-of-range or non-integer action values are zeroed during normalization and do not count toward the budget.",
            "first_round_no_mining_and_initial_gold": "Explicitly enforce that at t=1 no mining is possible (第一轮无法开采) because all plots are unowned at initialization (第一轮初始化所有地块无主); all miners start with 0 gold (矿工有0个金币).",
            "defense_commitment_cost_and_scope": "Defense can only defend a plot already owned by the defender (防御只能防御自己已经有的这块土地); choosing defend[r,c]=1 is a pre-commit that costs 1 stamina if and only if it remains 1 after any clipping; if defend[r,c] is clipped to 0, no stamina is charged; under defend[r,c]=1 all raids on that plot fail for the round; under defend[r,c]=0 and at least one raider spending exactly 1 stamina, one raider is chosen uniformly to gain the land and all raiders pay the stamina."
        }
    },
    "agent_types": {
        "MinerAgent": "LLM-driven autonomous miner that allocates integer stamina across claim, raid, defend, and mine actions each round to maximize personal cumulative gold under short-memory observables and targeting rules.",
        "GridEnvironment": "Maintains the 10x10 grid, validates indices and ownership legality, and enforces nondepleting per-plot production caps.",
        "PropertyRightsResolver": "Resolves claims and raids with block-all defense and uniform random tie-breakers, updates ownership, and charges stamina costs regardless of success.",
        "BudgetSanitizer": "Normalizes illegal or conflicting per-cell actions, computes raw budget, and applies deterministic over-budget clipping; only retained defense incurs cost.",
        "RandomnessOracle": "Provides seeded uniform random draws for tie-breaks and any enabled randomized adjustments to ensure reproducibility across runs.",
        "MetricsEvaluator": "Computes efficiency upper bounds, tracks realized outputs, equity, and stability metrics, and reports efficiency ratios.",
        "HistoryLogger": "Publishes minimal public history (ownership grid and prior-round contest flags and winners), preserves defense privacy, and records clipping logs for auditing.",
        "SimulationCoordinator": "Orchestrates Stage A/B/C each round, resets stamina, manages horizons and multi-seed replications, and enforces timing and reproducibility settings."
    },
    "portrait": {
        "MinerAgent": 4,
        "GridEnvironment": 3,
        "PropertyRightsResolver": 1,
        "BudgetSanitizer": 3,
        "RandomnessOracle": 2,
        "MetricsEvaluator": 2,
        "HistoryLogger": 5,
        "SimulationCoordinator": 1
    }
}