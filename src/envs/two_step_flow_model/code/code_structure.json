{
  "agents": {
    "MediaAgent": {
      "imports": "from typing import Any, List,Optional\nimport json\nimport asyncio\nfrom loguru import logger\nfrom onesim.models import JsonBlockParser\nfrom onesim.agent import GeneralAgent\nfrom onesim.profile import AgentProfile\nfrom onesim.memory import MemoryStrategy\nfrom onesim.planning import PlanningBase\nfrom onesim.events import *\nfrom onesim.relationship import RelationshipManager\nfrom .events import *",
      "handlers": {
        "1": {
          "code": "async def generate_information(self, event: Event) -> List[Event]:\n        # Check if the incoming event is 'StartEvent'\n        if event.__class__.__name__ != \"StartEvent\":\n            return []\n    \n        # Generate new information content and determine target opinion leaders\n        instruction = \"\"\"\n        You are a MediaAgent tasked with generating new information content for dissemination. \n        Your goal is to initiate the information spread process by targeting opinion leaders.\n        Please generate a string for 'information_content' and decide on 'target_ids' which can be a single ID or a list of IDs of opinion leader agents.\n        Return the information in the following JSON format:\n    \n        {\n        \"information_content\": \"<The content of the new information>\",\n        \"target_ids\": [\"<The string ID or IDs of the opinion leader agents>\"]\n        }\n        \"\"\"\n        \n        # Generate the reaction using the LLM\n        result = await self.generate_reaction(instruction)\n    \n        # Extract information content and target opinion leaders from the result\n        information_content = result.get('information_content', \"\")\n        target_ids = result.get('target_ids', [])\n        if not isinstance(target_ids, list):\n            target_ids = [target_ids]\n    \n        # Create and send InformationGeneratedEvent to each target opinion leader\n        events = []\n        for target_id in target_ids:\n            information_event = InformationGeneratedEvent(self.profile_id, target_id, information_content, target_ids)\n            events.append(information_event)\n    \n        return events",
          "metadata": {
            "id": 1,
            "name": "generate_information",
            "condition": null,
            "description": "The MediaAgent generates new information content to be disseminated to opinion leaders, initiating the information spread process.",
            "type": "OR",
            "required_variables": [],
            "output_updates": [
              {
                "name": "information_content",
                "type": "string",
                "context": "agent",
                "description": "The content of the new information generated by the media agent."
              },
              {
                "name": "target_opinion_leaders",
                "type": "list",
                "context": "agent",
                "description": "List of opinion leader agents targeted to receive the information."
              }
            ]
          }
        }
      }
    },
    "OpinionLeaderAgent": {
      "imports": "from typing import Any, List, Optional\nimport json\nimport asyncio\nfrom loguru import logger\nfrom onesim.models import JsonBlockParser\nfrom onesim.agent import GeneralAgent\nfrom onesim.profile import AgentProfile\nfrom onesim.memory import MemoryStrategy\nfrom onesim.planning import PlanningBase\nfrom onesim.events import *\nfrom onesim.relationship import RelationshipManager\nfrom .events import *",
      "handlers": {
        "2": {
          "code": "async def filter_and_modify_information(self, event: Event) -> List[Event]:\n        # Extract required data from the event\n        information_content = event.information_content\n        target_opinion_leaders = event.target_opinion_leaders\n\n        # Check if the current agent is a target opinion leader\n        if self.profile_id not in target_opinion_leaders:\n            return []  # Return empty list if not a target\n\n        # Instruction to generate modified information and target public agents\n        instruction = \"\"\"\n        Please filter and modify the received information based on personal beliefs.\n        Return the modified information and choose appropriate public agents to receive it.\n        Use the following JSON format:\n\n        {\n            \"modified_information\": \"<The modified version of the information>\",\n            \"target_public_agents\": [\"<List of string IDs representing the public agents>\"]\n        }\n        \"\"\"\n\n        # Generate reaction using the instruction and observation\n        result = await self.generate_reaction(instruction, information_content)\n\n        # Extract modified information and target public agents from the result\n        modified_information = result.get('modified_information', \"\")\n        target_public_agents = result.get('target_public_agents', [])\n\n        # Ensure target_public_agents is a list\n        if not isinstance(target_public_agents, list):\n            target_public_agents = [target_public_agents]\n\n        # Prepare and send InformationModifiedEvent to each target public agent\n        events = []\n        for target_id in target_public_agents:\n            modified_event = InformationModifiedEvent(\n                from_agent_id=self.profile_id,\n                to_agent_id=target_id,\n                original_information=information_content,\n                modified_information=modified_information,\n                opinion_leader_id=self.profile_id,\n                target_public_agents=target_public_agents\n            )\n            events.append(modified_event)\n\n        return events",
          "metadata": {
            "id": 2,
            "name": "filter_and_modify_information",
            "condition": null,
            "description": "OpinionLeaderAgent receives information from the MediaAgent, evaluates its credibility, and modifies it according to personal beliefs before sharing it with the public.",
            "type": "OR",
            "required_variables": [
              {
                "name": "information_content",
                "type": "string",
                "context": "event",
                "description": "The content of the new information generated by the media agent."
              },
              {
                "name": "target_opinion_leaders",
                "type": "list",
                "context": "event",
                "description": "List of opinion leader agents targeted to receive the information."
              }
            ],
            "output_updates": [
              {
                "name": "original_information",
                "type": "string",
                "context": "agent",
                "description": "The original information received from the media agent."
              },
              {
                "name": "modified_information",
                "type": "string",
                "context": "agent",
                "description": "The modified version of the information after filtering by opinion leaders."
              },
              {
                "name": "opinion_leader_id",
                "type": "string",
                "context": "agent",
                "description": "Identifier of the opinion leader agent who modified the information."
              },
              {
                "name": "target_public_agents",
                "type": "list",
                "context": "agent",
                "description": "List of public agents targeted to receive the modified information."
              }
            ]
          }
        }
      }
    },
    "PublicAgent": {
      "imports": "from typing import Any, List,Optional\nimport json\nimport asyncio\nfrom loguru import logger\nfrom onesim.models import JsonBlockParser\nfrom onesim.agent import GeneralAgent\nfrom onesim.profile import AgentProfile\nfrom onesim.memory import MemoryStrategy\nfrom onesim.planning import PlanningBase\nfrom onesim.events import *\nfrom onesim.relationship import RelationshipManager\nfrom .events import *",
      "handlers": {
        "3": {
          "code": "async def receive_information(self, event: Event) -> List[Event]:\n        # Check if the event is of the correct type\n        if event.__class__.__name__ != \"InformationModifiedEvent\":\n            return []\n    \n        # Retrieve necessary fields from the event\n        modified_information = event.modified_information\n        opinion_leader_id = event.opinion_leader_id\n        target_public_agents = event.target_public_agents\n    \n        # Generate instruction for LLM\n        instruction = f\"\"\"PublicAgent has received modified information from OpinionLeaderAgent.\n        Please generate a reaction based on the received 'modified_information' and 'opinion_leader_id'.\n        Include the following in your JSON response:\n        {{\n            \"public_agent_reaction\": \"<The reaction or response of the public agent>\",\n            \"received_information\": \"{modified_information}\",\n            \"completion_status\": \"completed\",\n            \"target_ids\": [\"<The ID(s) of the target agents>\"]\n        }}\n        \"\"\"\n    \n        # Generate reaction using LLM\n        result = await self.generate_reaction(instruction)\n    \n        # Parse LLM response\n        public_agent_reaction = result.get('public_agent_reaction', None)\n        received_information = result.get('received_information', None)\n        completion_status = result.get('completion_status', None)\n        target_ids = result.get('target_ids', None)\n    \n        # Ensure target_ids is a list\n        if not isinstance(target_ids, list):\n            target_ids = [target_ids]\n    \n        # Update agent's profile with received information and reaction\n        self.profile.update_data(\"received_information\", received_information)\n        self.profile.update_data(\"public_agent_reaction\", public_agent_reaction)\n        self.profile.update_data(\"completion_status\", completion_status)\n    \n        # Prepare and send InformationReceivedEvent to EnvAgent\n        events = []\n        for target_id in target_ids:\n            information_received_event = InformationReceivedEvent(\n                self.profile_id, target_id, received_information, public_agent_reaction, completion_status)\n            events.append(information_received_event)\n    \n        return events",
          "metadata": {
            "id": 3,
            "name": "receive_information",
            "condition": null,
            "description": "PublicAgent receives modified information from opinion leaders and reacts to it, completing the information dissemination process.",
            "type": "OR",
            "required_variables": [
              {
                "name": "modified_information",
                "type": "string",
                "context": "event",
                "description": "The modified version of the information after filtering by opinion leaders."
              },
              {
                "name": "opinion_leader_id",
                "type": "string",
                "context": "event",
                "description": "Identifier of the opinion leader agent who modified the information."
              },
              {
                "name": "target_public_agents",
                "type": "list",
                "context": "event",
                "description": "List of public agents targeted to receive the modified information."
              }
            ],
            "output_updates": [
              {
                "name": "received_information",
                "type": "string",
                "context": "agent",
                "description": "The information received by the public agent."
              },
              {
                "name": "public_agent_reaction",
                "type": "string",
                "context": "agent",
                "description": "The reaction or response of the public agent upon receiving the information."
              },
              {
                "name": "completion_status",
                "type": "string",
                "context": "agent",
                "description": "Status indicating the completion of the information dissemination process."
              }
            ]
          }
        }
      }
    }
  },
  "events": {
    "imports": "from onesim.events import Event\nfrom typing import Any, List",
    "definitions": {
      "-1": {
        "code": "class StartEvent(Event):\n    def __init__(self,\n        from_agent_id: str,\n        to_agent_id: str,\n        **kwargs: Any\n    ) -> None:\n        super().__init__(from_agent_id=from_agent_id, to_agent_id=to_agent_id, **kwargs)",
        "metadata": {
          "id": -1,
          "from_agent_type": "EnvAgent",
          "from_action_name": "start",
          "to_agent_type": "MediaAgent",
          "to_action_name": "generate_information",
          "from_action_id": 0,
          "to_action_id": 1,
          "event_name": "StartEvent",
          "event_info": "Initial trigger for information generation",
          "fields": []
        }
      },
      "1": {
        "code": "class InformationGeneratedEvent(Event):\n    def __init__(self,\n        from_agent_id: str,\n        to_agent_id: str,\n        information_content: str = \"\",\n        target_opinion_leaders: List[Any] = [],\n        **kwargs: Any\n    ) -> None:\n        super().__init__(from_agent_id=from_agent_id, to_agent_id=to_agent_id, **kwargs)\n        self.information_content = information_content\n        self.target_opinion_leaders = target_opinion_leaders",
        "metadata": {
          "id": 1,
          "from_agent_type": "MediaAgent",
          "from_action_name": "generate_information",
          "to_agent_type": "OpinionLeaderAgent",
          "to_action_name": "filter_and_modify_information",
          "from_action_id": 1,
          "to_action_id": 2,
          "event_name": "InformationGeneratedEvent",
          "event_info": "New information generated and sent to opinion leaders",
          "fields": [
            {
              "name": "information_content",
              "type": "string",
              "default_value": "",
              "description": "The content of the new information generated by the media agent."
            },
            {
              "name": "target_opinion_leaders",
              "type": "list",
              "default_value": "[]",
              "description": "List of opinion leader agents targeted to receive the information."
            }
          ]
        }
      },
      "2": {
        "code": "class InformationModifiedEvent(Event):\n    def __init__(self,\n        from_agent_id: str,\n        to_agent_id: str,\n        original_information: str = \"\",\n        modified_information: str = \"\",\n        opinion_leader_id: str = \"\",\n        target_public_agents: List[Any] = [],\n        **kwargs: Any\n    ) -> None:\n        super().__init__(from_agent_id=from_agent_id, to_agent_id=to_agent_id, **kwargs)\n        self.original_information = original_information\n        self.modified_information = modified_information\n        self.opinion_leader_id = opinion_leader_id\n        self.target_public_agents = target_public_agents",
        "metadata": {
          "id": 2,
          "from_agent_type": "OpinionLeaderAgent",
          "from_action_name": "filter_and_modify_information",
          "to_agent_type": "PublicAgent",
          "to_action_name": "receive_information",
          "from_action_id": 2,
          "to_action_id": 3,
          "event_name": "InformationModifiedEvent",
          "event_info": "Filtered and modified information sent to the public",
          "fields": [
            {
              "name": "original_information",
              "type": "string",
              "default_value": "",
              "description": "The original information received from the media agent."
            },
            {
              "name": "modified_information",
              "type": "string",
              "default_value": "",
              "description": "The modified version of the information after filtering by opinion leaders."
            },
            {
              "name": "opinion_leader_id",
              "type": "string",
              "default_value": "",
              "description": "Identifier of the opinion leader agent who modified the information."
            },
            {
              "name": "target_public_agents",
              "type": "list",
              "default_value": "[]",
              "description": "List of public agents targeted to receive the modified information."
            }
          ]
        }
      },
      "3": {
        "code": "class InformationReceivedEvent(Event):\n    def __init__(self,\n        from_agent_id: str,\n        to_agent_id: str,\n        received_information: str = \"\",\n        public_agent_reaction: str = \"\",\n        completion_status: str = 'completed',\n        **kwargs: Any\n    ) -> None:\n        super().__init__(from_agent_id=from_agent_id, to_agent_id=to_agent_id, **kwargs)\n        self.received_information = received_information\n        self.public_agent_reaction = public_agent_reaction\n        self.completion_status = completion_status",
        "metadata": {
          "id": 3,
          "from_agent_type": "PublicAgent",
          "from_action_name": "receive_information",
          "to_agent_type": "EnvAgent",
          "to_action_name": "terminate",
          "from_action_id": 3,
          "to_action_id": -1,
          "event_name": "InformationReceivedEvent",
          "event_info": "Public has received and reacted to information, completing the workflow",
          "fields": [
            {
              "name": "received_information",
              "type": "string",
              "default_value": "",
              "description": "The information received by the public agent."
            },
            {
              "name": "public_agent_reaction",
              "type": "string",
              "default_value": "",
              "description": "The reaction or response of the public agent upon receiving the information."
            },
            {
              "name": "completion_status",
              "type": "string",
              "default_value": "completed",
              "description": "Status indicating the completion of the information dissemination process."
            }
          ]
        }
      }
    }
  }
}