{
  "agents": {
    "Plaintiff": {
      "imports": "from typing import Any, List,Optional\nimport json\nimport asyncio\nfrom loguru import logger\nfrom onesim.models import JsonBlockParser\nfrom onesim.agent import GeneralAgent\nfrom onesim.profile import AgentProfile\nfrom onesim.memory import MemoryStrategy\nfrom onesim.planning import PlanningBase\nfrom onesim.events import *\nfrom onesim.relationship import RelationshipManager\nfrom .events import *",
      "handlers": {
        "1": {
          "code": "async def submit_evidence(self, event: Event) -> List[Event]:\n        # No condition to check as condition is None\n    \n        # Retrieve data from agent profile\n        evidence_details = self.profile.get_data(\"evidence_details\", \"\")\n        plaintiff_id = self.profile.get_data(\"plaintiff_id\", \"\")\n        case_id = await self.get_env_data(\"case_id\", \"\")\n    \n        # Update agent profile to indicate evidence has been submitted\n        self.profile.update_data(\"evidence_submitted\", True)\n    \n        # Prepare instruction for generate_reaction\n        instruction = \"\"\"\n        The Plaintiff is submitting evidence of unjust enrichment. \n        Please determine the target_ids, which can be a single ID or a list of IDs, to which this evidence should be sent.\n        The response should be in JSON format:\n        {\n            \"target_ids\": [\"<The string ID(s) of the Judge agent>\"]\n        }\n        \"\"\"\n    \n        # Generate reaction to determine target_ids\n        result = await self.generate_reaction(instruction)\n        target_ids = result.get('target_ids', [])\n        if not isinstance(target_ids, list):\n            target_ids = [target_ids]\n    \n        # Create and send EvidenceSubmittedEvent to each target_id\n        events = []\n        for target_id in target_ids:\n            evidence_event = EvidenceSubmittedEvent(\n                self.profile_id,\n                target_id,\n                evidence_details=evidence_details,\n                plaintiff_id=plaintiff_id,\n                case_id=case_id\n            )\n            events.append(evidence_event)\n    \n        return events",
          "metadata": {
            "id": 1,
            "name": "submit_evidence",
            "condition": null,
            "description": "The Plaintiff submits evidence to support their claim of unjust enrichment, aiming to prove that the Defendant has unfairly benefited without a contractual agreement.",
            "type": "OR",
            "required_variables": [
              {
                "name": "evidence_details",
                "type": "string",
                "context": "agent",
                "description": "Detailed description of the evidence that the Plaintiff submits to support their claim."
              },
              {
                "name": "plaintiff_id",
                "type": "string",
                "context": "agent",
                "description": "Unique identifier for the Plaintiff submitting the evidence."
              },
              {
                "name": "case_id",
                "type": "string",
                "context": "env",
                "description": "Unique identifier for the legal case."
              }
            ],
            "output_updates": [
              {
                "name": "evidence_submitted",
                "type": "boolean",
                "context": "agent",
                "description": "Flag indicating that the Plaintiff has submitted the evidence."
              }
            ]
          }
        }
      }
    },
    "Defendant": {
      "imports": "from typing import Any, List,Optional\nimport json\nimport asyncio\nfrom loguru import logger\nfrom onesim.models import JsonBlockParser\nfrom onesim.agent import GeneralAgent\nfrom onesim.profile import AgentProfile\nfrom onesim.memory import MemoryStrategy\nfrom onesim.planning import PlanningBase\nfrom onesim.events import *\nfrom onesim.relationship import RelationshipManager\nfrom .events import *",
      "handlers": {
        "2": {
          "code": "async def prepare_defense(self, event: Event) -> List[Event]:\n        # No condition to check, proceed directly with the handler logic\n    \n        # Retrieve required variables\n        defense_arguments = self.profile.get_data(\"defense_arguments\", \"\")\n        defendant_id = self.profile.get_data(\"defendant_id\", \"\")\n        case_id = await self.get_env_data(\"case_id\", \"\")\n    \n        # Prepare instruction for LLM\n        instruction = \"\"\"\n        You are preparing a defense for the Defendant in a legal case of unjust enrichment.\n        Ensure that the defense arguments are comprehensive and address the Plaintiff's claims effectively.\n        Return the information in the following JSON format:\n    \n        {\n            \"defense_arguments\": \"<Prepared defense arguments>\",\n            \"target_ids\": [\"<The string ID(s) of the Judge agent(s)>\"]\n        }\n        \"\"\"\n    \n        # Generate reaction using LLM\n        observation = f\"Defense Arguments: {defense_arguments}, Defendant ID: {defendant_id}, Case ID: {case_id}\"\n        result = await self.generate_reaction(instruction, observation)\n    \n        # Extract and validate LLM's response\n        defense_arguments = result.get('defense_arguments', defense_arguments)\n        target_ids = result.get('target_ids', None)\n        if not isinstance(target_ids, list):\n            target_ids = [target_ids]\n    \n        # Update agent's state\n        self.profile.update_data(\"defense_prepared\", True)\n    \n        # Prepare and send DefensePreparedEvent to the Judge\n        events = []\n        for target_id in target_ids:\n            defense_event = DefensePreparedEvent(\n                self.profile_id, target_id,\n                defense_arguments=defense_arguments,\n                defendant_id=defendant_id,\n                case_id=case_id\n            )\n            events.append(defense_event)\n    \n        return events",
          "metadata": {
            "id": 2,
            "name": "prepare_defense",
            "condition": null,
            "description": "The Defendant prepares their defense against the Plaintiff's claims, providing arguments and evidence to counter the allegations of unjust enrichment.",
            "type": "OR",
            "required_variables": [
              {
                "name": "defense_arguments",
                "type": "string",
                "context": "agent",
                "description": "Arguments prepared by the Defendant to counter the Plaintiff's claims."
              },
              {
                "name": "defendant_id",
                "type": "string",
                "context": "agent",
                "description": "Unique identifier for the Defendant preparing the defense."
              },
              {
                "name": "case_id",
                "type": "string",
                "context": "env",
                "description": "Unique identifier for the legal case."
              }
            ],
            "output_updates": [
              {
                "name": "defense_prepared",
                "type": "boolean",
                "context": "agent",
                "description": "Flag indicating that the Defendant has prepared their defense."
              }
            ]
          }
        }
      }
    },
    "Judge": {
      "imports": "from typing import Any, List, Optional\nimport json\nimport asyncio\nfrom loguru import logger\nfrom onesim.models import JsonBlockParser\nfrom onesim.agent import GeneralAgent\nfrom onesim.profile import AgentProfile\nfrom onesim.memory import MemoryStrategy\nfrom onesim.planning import PlanningBase\nfrom onesim.events import *\nfrom onesim.relationship import RelationshipManager\nfrom .events import *",
      "handlers": {
        "3": {
          "code": "async def evaluate_evidence(self, event: Event) -> List[Event]:\n        if not isinstance(event, EvidenceSubmittedEvent):\n            return []\n\n        evidence_details = event.evidence_details\n        plaintiff_id = event.plaintiff_id\n        case_id = event.case_id\n\n        observation = f\"Evaluating evidence for case {case_id} submitted by plaintiff {plaintiff_id}.\"\n        instruction = \"\"\"\n        You are a Judge evaluating evidence in a legal case of unjust enrichment. Analyze the evidence details provided and determine the validity and relevance of the evidence. \n        Based on your evaluation, decide on the result of the evidence evaluation. \n        Please return the information in the following JSON format:\n\n        {\n        \"evidence_evaluation_result\": \"<Result of the evaluation>\",\n        \"target_ids\": [\"<The string ID of the Judge agent for the next action>\"]\n        }\n        \"\"\"\n\n        result = await self.generate_reaction(instruction, observation)\n\n        evidence_evaluation_result = result.get('evidence_evaluation_result', \"pending\")\n        target_ids = result.get('target_ids', None)\n        if not isinstance(target_ids, list):\n            target_ids = [target_ids]\n\n        events = []\n        if target_ids:\n            self.profile.update_data(\"evidence_evaluation_result\", evidence_evaluation_result)\n            for target_id in target_ids:\n                evaluation_event = EvidenceEvaluationEvent(self.profile_id, target_id, evidence_evaluation_result, self.profile_id, case_id)\n                events.append(evaluation_event)\n\n        return events",
          "metadata": {
            "id": 3,
            "name": "evaluate_evidence",
            "condition": "EvidenceSubmittedEvent received",
            "description": "The Judge evaluates the evidence submitted by the Plaintiff to determine its validity and relevance to the claim of unjust enrichment.",
            "type": "OR",
            "required_variables": [
              {
                "name": "evidence_details",
                "type": "string",
                "context": "event",
                "description": "Detailed description of the evidence submitted by the Plaintiff."
              },
              {
                "name": "plaintiff_id",
                "type": "string",
                "context": "event",
                "description": "Unique identifier for the Plaintiff submitting the evidence."
              },
              {
                "name": "case_id",
                "type": "string",
                "context": "event",
                "description": "Unique identifier for the legal case."
              }
            ],
            "output_updates": [
              {
                "name": "evidence_evaluation_result",
                "type": "string",
                "context": "agent",
                "description": "Result of the Judge's evaluation of the Plaintiff's evidence."
              }
            ]
          }
        },
        "4": {
          "code": "async def evaluate_defense(self, event: Event) -> List[Event]:\n        if not isinstance(event, DefensePreparedEvent):\n            return []\n\n        defense_arguments = event.defense_arguments\n        defendant_id = event.defendant_id\n        case_id = event.case_id\n\n        observation = f\"Defense Arguments: {defense_arguments}, Defendant ID: {defendant_id}, Case ID: {case_id}\"\n        instruction = \"\"\"\n        Evaluate the defense arguments provided by the Defendant in the context of the legal case of unjust enrichment.\n        Determine the validity and relevance of these arguments in response to the Plaintiff's claims.\n        Please return the evaluation result and the target IDs for the next action in the following JSON format:\n\n        {\n        \"evaluation_result\": \"<Result of the defense evaluation>\",\n        \"target_ids\": [\"<The string ID(s) of the next target agent(s)>\"]\n        }\n        \"\"\"\n\n        result = await self.generate_reaction(instruction, observation)\n\n        evaluation_result = result.get('evaluation_result', \"pending\")\n        target_ids = result.get('target_ids', None)\n        if not isinstance(target_ids, list):\n            target_ids = [target_ids]\n\n        events = []\n        if target_ids:\n            self.profile.update_data(\"defense_evaluation_result\", evaluation_result)\n            for target_id in target_ids:\n                defense_evaluation_event = DefenseEvaluationEvent(\n                    self.profile_id,\n                    target_id,\n                    evaluation_result=evaluation_result,\n                    judge_id=self.profile_id,\n                    case_id=case_id\n                )\n                events.append(defense_evaluation_event)\n\n        return events",
          "metadata": {
            "id": 4,
            "name": "evaluate_defense",
            "condition": "DefensePreparedEvent received",
            "description": "The Judge evaluates the defense arguments presented by the Defendant to assess their validity and relevance in response to the Plaintiff's claims.",
            "type": "OR",
            "required_variables": [
              {
                "name": "defense_arguments",
                "type": "string",
                "context": "event",
                "description": "Arguments prepared by the Defendant in response to the Plaintiff's claims."
              },
              {
                "name": "defendant_id",
                "type": "string",
                "context": "event",
                "description": "Unique identifier for the Defendant preparing the defense."
              },
              {
                "name": "case_id",
                "type": "string",
                "context": "event",
                "description": "Unique identifier for the legal case."
              }
            ],
            "output_updates": [
              {
                "name": "defense_evaluation_result",
                "type": "string",
                "context": "agent",
                "description": "Result of the Judge's evaluation of the Defendant's defense arguments."
              }
            ]
          }
        },
        "5": {
          "code": "async def make_decision(self, event: Event) -> List[Event]:\n        if isinstance(event, EvidenceEvaluationEvent):\n            self.profile.update_data(\"evidence_evaluation_result\", event.evaluation_result)\n\n        if isinstance(event, DefenseEvaluationEvent):\n            self.profile.update_data(\"defense_evaluation_result\", event.evaluation_result)\n\n        evidence_evaluation_result = self.profile.get_data(\"evidence_evaluation_result\", \"pending\")\n        defense_evaluation_result = self.profile.get_data(\"defense_evaluation_result\", \"pending\")\n\n        if evidence_evaluation_result == \"pending\" or defense_evaluation_result == \"pending\":\n            return []\n\n        judge_id = self.profile.get_data(\"judge_id\", \"\")\n        case_id = event.case_id  # Retrieve case_id from the event\n\n        observation = f\"Evidence Result: {evidence_evaluation_result}, Defense Result: {defense_evaluation_result}\"\n        instruction = \"\"\"Evaluate the case of unjust enrichment based on the provided evidence and defense results.\n        Determine whether unjust enrichment occurred and decide on restitution or compensation.\n        Return the information in the following JSON format:\n\n        {\n        \"judgment_result\": \"<Final decision on the case>\",\n        \"completion_status\": \"<Status indicating the conclusion of the simulation>\",\n        \"target_ids\": [\"ENV\"]\n        }\n        \"\"\"\n\n        result = await self.generate_reaction(instruction, observation)\n\n        judgment_result = result.get('judgment_result', \"undecided\")\n        completion_status = result.get('completion_status', \"incomplete\")\n        target_ids = result.get('target_ids', None)\n        if not isinstance(target_ids, list):\n            target_ids = [target_ids]\n\n        events = []\n        for target_id in target_ids:\n            judgment_event = JudgmentEvent(self.profile_id, target_id, judgment_result, judge_id, case_id, completion_status)\n            events.append(judgment_event)\n\n        return events",
          "metadata": {
            "id": 5,
            "name": "make_decision",
            "condition": "EvidenceEvaluationEvent and DefenseEvaluationEvent received",
            "description": "The Judge makes a final decision on the case, determining whether unjust enrichment occurred and deciding on restitution or compensation.",
            "type": "AND",
            "required_variables": [
              {
                "name": "evidence_evaluation_result",
                "type": "string",
                "context": "agent",
                "description": "Result of the Judge's evaluation of the Plaintiff's evidence."
              },
              {
                "name": "defense_evaluation_result",
                "type": "string",
                "context": "agent",
                "description": "Result of the Judge's evaluation of the Defendant's defense."
              },
              {
                "name": "judge_id",
                "type": "string",
                "context": "agent",
                "description": "Unique identifier for the Judge making the decision."
              },
              {
                "name": "case_id",
                "type": "string",
                "context": "agent",
                "description": "Unique identifier for the legal case."
              }
            ],
            "output_updates": [
              {
                "name": "judgment_result",
                "type": "string",
                "context": "env",
                "description": "Final decision made by the Judge on the case."
              },
              {
                "name": "completion_status",
                "type": "string",
                "context": "env",
                "description": "Status indicating whether the simulation has concluded."
              }
            ]
          }
        }
      }
    }
  },
  "events": {
    "imports": "from onesim.events import Event\nfrom typing import Any",
    "definitions": {
      "-1": {
        "code": "class StartEvent(Event):\n    def __init__(self,\n        from_agent_id: str,\n        to_agent_id: str,\n        **kwargs: Any\n    ) -> None:\n        super().__init__(from_agent_id=from_agent_id, to_agent_id=to_agent_id, **kwargs)",
        "metadata": {
          "id": -1,
          "from_agent_type": "EnvAgent",
          "from_action_name": "start",
          "to_agent_type": "Plaintiff",
          "to_action_name": "submit_evidence",
          "from_action_id": 0,
          "to_action_id": 1,
          "event_name": "StartEvent",
          "event_info": "Initial trigger for Plaintiff to present evidence of unjust enrichment",
          "fields": []
        }
      },
      "-2": {
        "code": "class StartEvent(Event):\n    def __init__(self,\n        from_agent_id: str,\n        to_agent_id: str,\n        **kwargs: Any\n    ) -> None:\n        super().__init__(from_agent_id=from_agent_id, to_agent_id=to_agent_id, **kwargs)",
        "metadata": {
          "id": -2,
          "from_agent_type": "EnvAgent",
          "from_action_name": "start",
          "to_agent_type": "Defendant",
          "to_action_name": "prepare_defense",
          "from_action_id": 0,
          "to_action_id": 2,
          "event_name": "StartEvent",
          "event_info": "Initial trigger for Defendant to prepare arguments against the claim",
          "fields": []
        }
      },
      "1": {
        "code": "class EvidenceSubmittedEvent(Event):\n    def __init__(self,\n        from_agent_id: str,\n        to_agent_id: str,\n        evidence_details: str = \"\",\n        plaintiff_id: str = \"\",\n        case_id: str = \"\",\n        **kwargs: Any\n    ) -> None:\n        super().__init__(from_agent_id=from_agent_id, to_agent_id=to_agent_id, **kwargs)\n        self.evidence_details = evidence_details\n        self.plaintiff_id = plaintiff_id\n        self.case_id = case_id",
        "metadata": {
          "id": 1,
          "from_agent_type": "Plaintiff",
          "from_action_name": "submit_evidence",
          "to_agent_type": "Judge",
          "to_action_name": "evaluate_evidence",
          "from_action_id": 1,
          "to_action_id": 3,
          "event_name": "EvidenceSubmittedEvent",
          "event_info": "Plaintiff submits evidence of unjust enrichment for judicial review",
          "fields": [
            {
              "name": "evidence_details",
              "type": "string",
              "default_value": "",
              "description": "Detailed description of the evidence submitted by the Plaintiff."
            },
            {
              "name": "plaintiff_id",
              "type": "string",
              "default_value": "",
              "description": "Unique identifier for the Plaintiff submitting the evidence."
            },
            {
              "name": "case_id",
              "type": "string",
              "default_value": "",
              "description": "Unique identifier for the legal case."
            }
          ]
        }
      },
      "2": {
        "code": "class DefensePreparedEvent(Event):\n    def __init__(self,\n        from_agent_id: str,\n        to_agent_id: str,\n        defense_arguments: str = \"\",\n        defendant_id: str = \"\",\n        case_id: str = \"\",\n        **kwargs: Any\n    ) -> None:\n        super().__init__(from_agent_id=from_agent_id, to_agent_id=to_agent_id, **kwargs)\n        self.defense_arguments = defense_arguments\n        self.defendant_id = defendant_id\n        self.case_id = case_id",
        "metadata": {
          "id": 2,
          "from_agent_type": "Defendant",
          "from_action_name": "prepare_defense",
          "to_agent_type": "Judge",
          "to_action_name": "evaluate_defense",
          "from_action_id": 2,
          "to_action_id": 4,
          "event_name": "DefensePreparedEvent",
          "event_info": "Defendant prepares and submits defense arguments against claims",
          "fields": [
            {
              "name": "defense_arguments",
              "type": "string",
              "default_value": "",
              "description": "Arguments prepared by the Defendant in response to the Plaintiff's claims."
            },
            {
              "name": "defendant_id",
              "type": "string",
              "default_value": "",
              "description": "Unique identifier for the Defendant preparing the defense."
            },
            {
              "name": "case_id",
              "type": "string",
              "default_value": "",
              "description": "Unique identifier for the legal case."
            }
          ]
        }
      },
      "3": {
        "code": "class EvidenceEvaluationEvent(Event):\n    def __init__(self,\n        from_agent_id: str,\n        to_agent_id: str,\n        evaluation_result: str = 'pending',\n        judge_id: str = \"\",\n        case_id: str = \"\",\n        **kwargs: Any\n    ) -> None:\n        super().__init__(from_agent_id=from_agent_id, to_agent_id=to_agent_id, **kwargs)\n        self.evaluation_result = evaluation_result\n        self.judge_id = judge_id\n        self.case_id = case_id",
        "metadata": {
          "id": 3,
          "from_agent_type": "Judge",
          "from_action_name": "evaluate_evidence",
          "to_agent_type": "Judge",
          "to_action_name": "make_decision",
          "from_action_id": 3,
          "to_action_id": 5,
          "event_name": "EvidenceEvaluationEvent",
          "event_info": "Judge completes evaluation of plaintiff's evidence",
          "fields": [
            {
              "name": "evaluation_result",
              "type": "string",
              "default_value": "pending",
              "description": "Result of the Judge's evaluation of the Plaintiff's evidence."
            },
            {
              "name": "judge_id",
              "type": "string",
              "default_value": "",
              "description": "Unique identifier for the Judge evaluating the evidence."
            },
            {
              "name": "case_id",
              "type": "string",
              "default_value": "",
              "description": "Unique identifier for the legal case."
            }
          ]
        }
      },
      "4": {
        "code": "class DefenseEvaluationEvent(Event):\n    def __init__(self,\n        from_agent_id: str,\n        to_agent_id: str,\n        evaluation_result: str = 'pending',\n        judge_id: str = \"\",\n        case_id: str = \"\",\n        **kwargs: Any\n    ) -> None:\n        super().__init__(from_agent_id=from_agent_id, to_agent_id=to_agent_id, **kwargs)\n        self.evaluation_result = evaluation_result\n        self.judge_id = judge_id\n        self.case_id = case_id",
        "metadata": {
          "id": 4,
          "from_agent_type": "Judge",
          "from_action_name": "evaluate_defense",
          "to_agent_type": "Judge",
          "to_action_name": "make_decision",
          "from_action_id": 4,
          "to_action_id": 5,
          "event_name": "DefenseEvaluationEvent",
          "event_info": "Judge completes evaluation of defendant's arguments",
          "fields": [
            {
              "name": "evaluation_result",
              "type": "string",
              "default_value": "pending",
              "description": "Result of the Judge's evaluation of the Defendant's defense arguments."
            },
            {
              "name": "judge_id",
              "type": "string",
              "default_value": "",
              "description": "Unique identifier for the Judge evaluating the defense."
            },
            {
              "name": "case_id",
              "type": "string",
              "default_value": "",
              "description": "Unique identifier for the legal case."
            }
          ]
        }
      },
      "5": {
        "code": "class JudgmentEvent(Event):\n    def __init__(self,\n        from_agent_id: str,\n        to_agent_id: str,\n        judgment_result: str = 'undecided',\n        judge_id: str = \"\",\n        case_id: str = \"\",\n        completion_status: str = 'incomplete',\n        **kwargs: Any\n    ) -> None:\n        super().__init__(from_agent_id=from_agent_id, to_agent_id=to_agent_id, **kwargs)\n        self.judgment_result = judgment_result\n        self.judge_id = judge_id\n        self.case_id = case_id\n        self.completion_status = completion_status",
        "metadata": {
          "id": 5,
          "from_agent_type": "Judge",
          "from_action_name": "make_decision",
          "to_agent_type": "EnvAgent",
          "to_action_name": "terminate",
          "from_action_id": 5,
          "to_action_id": -1,
          "event_name": "JudgmentEvent",
          "event_info": "Judge issues a decision on the case, concluding the simulation",
          "fields": [
            {
              "name": "judgment_result",
              "type": "string",
              "default_value": "undecided",
              "description": "Final decision made by the Judge on the case."
            },
            {
              "name": "judge_id",
              "type": "string",
              "default_value": "",
              "description": "Unique identifier for the Judge issuing the judgment."
            },
            {
              "name": "case_id",
              "type": "string",
              "default_value": "",
              "description": "Unique identifier for the legal case."
            },
            {
              "name": "completion_status",
              "type": "string",
              "default_value": "incomplete",
              "description": "Status indicating whether the simulation has concluded."
            }
          ]
        }
      }
    }
  }
}