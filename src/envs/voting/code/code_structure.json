{
  "agents": {
    "VoterAgent": {
      "imports": "from typing import Any, List, Optional\nimport json\nimport asyncio\nfrom loguru import logger\nfrom onesim.models import JsonBlockParser\nfrom onesim.agent import GeneralAgent\nfrom onesim.profile import AgentProfile\nfrom onesim.memory import MemoryStrategy\nfrom onesim.planning import PlanningBase\nfrom onesim.events import *\nfrom onesim.relationship import RelationshipManager\nfrom .events import *",
      "handlers": {
        "1": {
          "code": "async def decide_participation(self, event: Event) -> List[Event]:\n        # Retrieve necessary data\n        voter_id = self.profile.get_data(\"voter_id\", \"unknown\")\n        external_influences = await self.get_env_data(\"external_influences\", [])\n        personal_preferences = self.profile.get_data(\"personal_preferences\", [])\n    \n        # Prepare instruction for decision making\n        instruction = \"\"\"\n        You are a voter deciding whether to participate in the voting process.\n        Consider your personal preferences and any external influences.\n        Return your decision in the following JSON format:\n        {\n        \"participation_decision\": <true or false>,\n        \"reason_for_non_participation\": \"<Reason if not participating>\",\n        \"target_ids\": [\"<The string ID of the next agent or 'ENV' for terminal>\"]\n        }\n        \"\"\"\n    \n        observation = f\"External influences: {external_influences}, Personal preferences: {personal_preferences}\"\n        \n        # Generate reaction using LLM\n        result = await self.generate_reaction(instruction, observation)\n        \n        participation_decision = result.get('participation_decision', False)\n        reason_for_non_participation = result.get('reason_for_non_participation', \"none\")\n        target_ids = result.get('target_ids', [])\n        if not isinstance(target_ids, list):\n            target_ids = [target_ids]\n    \n        # Prepare events based on participation decision\n        events = []\n        if participation_decision:\n            for target_id in target_ids:\n                participation_event = ParticipationDecisionEvent(self.profile_id, target_id, voter_id, participation_decision)\n                events.append(participation_event)\n        else:\n            for target_id in target_ids:\n                non_participation_event = NonParticipationEvent(self.profile_id, target_id, voter_id, reason_for_non_participation)\n                events.append(non_participation_event)\n    \n        return events",
          "metadata": {
            "id": 1,
            "name": "decide_participation",
            "condition": null,
            "description": "This action involves the voter deciding whether to participate in the voting process based on their preferences and external influences.",
            "type": "OR",
            "required_variables": [
              {
                "name": "voter_id",
                "type": "string",
                "context": "agent",
                "description": "Unique identifier for the voter making the participation decision"
              },
              {
                "name": "external_influences",
                "type": "list",
                "context": "env",
                "description": "List of external factors that may affect the voter's decision to participate"
              },
              {
                "name": "personal_preferences",
                "type": "list",
                "context": "agent",
                "description": "List of personal preferences that guide the voter's decision-making process"
              }
            ],
            "output_updates": [
              {
                "name": "participation_decision",
                "type": "boolean",
                "context": "agent",
                "description": "Indicates whether the voter decides to participate in voting"
              }
            ]
          }
        },
        "2": {
          "code": "async def select_candidate(self, event: Event) -> List[Event]:\n        # Check if the event is of type ParticipationDecisionEvent and if the voter has decided to participate\n        if not isinstance(event, ParticipationDecisionEvent) or not event.participation_decision:\n            logger.warning(\"Event type is not ParticipationDecisionEvent or participation decision is False.\")\n            return []\n    \n        # Retrieve necessary data\n        voter_id = self.profile.get_data(\"voter_id\", \"unknown\")\n        candidate_list = await self.get_env_data(\"candidate_list\", [])\n        personal_preferences = self.profile.get_data(\"personal_preferences\", [])\n    \n        # Prepare observation and instruction for decision making\n        observation = f\"Voter ID: {voter_id}, Candidate List: {candidate_list}, Preferences: {personal_preferences}\"\n        instruction = \"\"\"Based on the voter's preferences and the available candidates, select the most suitable candidate.\n    Please return the information in the following JSON format:\n    \n    {\n        \"selected_candidate_id\": \"<The string ID of the selected candidate>\",\n        \"preference_score\": <The float score representing the preference>,\n        \"target_ids\": [\"<The string ID of the EnvAgent>\"]\n    }\n    \"\"\"\n    \n        # Generate the reaction using LLM\n        result = await self.generate_reaction(instruction, observation)\n    \n        # Extract the results from the LLM's response\n        selected_candidate_id = result.get('selected_candidate_id', \"none\")\n        preference_score = result.get('preference_score', 0.0)\n        target_ids = result.get('target_ids', [])\n        if not isinstance(target_ids, list):\n            target_ids = [target_ids]\n    \n        # Update the agent's state with the selected candidate and preference score\n        self.profile.update_data(\"selected_candidate_id\", selected_candidate_id)\n        self.profile.update_data(\"preference_score\", preference_score)\n    \n        # Prepare and send the CandidateSelectionEvent to the EnvAgent\n        events = []\n        for target_id in target_ids:\n            candidate_selection_event = CandidateSelectionEvent(self.profile_id, target_id, voter_id, selected_candidate_id, preference_score)\n            events.append(candidate_selection_event)\n    \n        return events",
          "metadata": {
            "id": 2,
            "name": "select_candidate",
            "condition": "Voter has decided to participate",
            "description": "This action involves the voter choosing a candidate to vote for, based on their preferences and the information available.",
            "type": "OR",
            "required_variables": [
              {
                "name": "voter_id",
                "type": "string",
                "context": "agent",
                "description": "Unique identifier for the voter selecting a candidate"
              },
              {
                "name": "candidate_list",
                "type": "list",
                "context": "env",
                "description": "List of available candidates for the voter to choose from"
              },
              {
                "name": "personal_preferences",
                "type": "list",
                "context": "agent",
                "description": "List of personal preferences that influence the voter's candidate selection"
              }
            ],
            "output_updates": [
              {
                "name": "selected_candidate_id",
                "type": "string",
                "context": "agent",
                "description": "Identifier for the candidate selected by the voter"
              },
              {
                "name": "preference_score",
                "type": "float",
                "context": "agent",
                "description": "Score representing the voter's preference for the selected candidate"
              }
            ]
          }
        }
      }
    }
  },
  "events": {
    "imports": "from onesim.events import Event\nfrom typing import Any",
    "definitions": {
      "-1": {
        "code": "class StartEvent(Event):\n    def __init__(self,\n        from_agent_id: str,\n        to_agent_id: str,\n        **kwargs: Any\n    ) -> None:\n        super().__init__(from_agent_id=from_agent_id, to_agent_id=to_agent_id, **kwargs)",
        "metadata": {
          "id": -1,
          "from_agent_type": "EnvAgent",
          "from_action_name": "start",
          "to_agent_type": "VoterAgent",
          "to_action_name": "decide_participation",
          "from_action_id": 0,
          "to_action_id": 1,
          "event_name": "StartEvent",
          "event_info": "Initial trigger for voter participation decision",
          "fields": []
        }
      },
      "1": {
        "code": "class ParticipationDecisionEvent(Event):\n    def __init__(self,\n        from_agent_id: str,\n        to_agent_id: str,\n        voter_id: str = 'unknown',\n        participation_decision: bool = False,\n        **kwargs: Any\n    ) -> None:\n        super().__init__(from_agent_id=from_agent_id, to_agent_id=to_agent_id, **kwargs)\n        self.voter_id = voter_id\n        self.participation_decision = participation_decision",
        "metadata": {
          "id": 1,
          "from_agent_type": "VoterAgent",
          "from_action_name": "decide_participation",
          "to_agent_type": "VoterAgent",
          "to_action_name": "select_candidate",
          "from_action_id": 1,
          "to_action_id": 2,
          "event_name": "ParticipationDecisionEvent",
          "event_info": "Decision made on whether to participate in voting",
          "fields": [
            {
              "name": "voter_id",
              "type": "string",
              "default_value": "unknown",
              "description": "Unique identifier for the voter making the participation decision"
            },
            {
              "name": "participation_decision",
              "type": "boolean",
              "default_value": "false",
              "description": "Indicates whether the voter decides to participate in voting"
            }
          ]
        }
      },
      "2": {
        "code": "class NonParticipationEvent(Event):\n    def __init__(self,\n        from_agent_id: str,\n        to_agent_id: str,\n        voter_id: str = 'unknown',\n        reason_for_non_participation: str = 'none',\n        **kwargs: Any\n    ) -> None:\n        super().__init__(from_agent_id=from_agent_id, to_agent_id=to_agent_id, **kwargs)\n        self.voter_id = voter_id\n        self.reason_for_non_participation = reason_for_non_participation",
        "metadata": {
          "id": 2,
          "from_agent_type": "VoterAgent",
          "from_action_name": "decide_participation",
          "to_agent_type": "EnvAgent",
          "to_action_name": "terminate",
          "from_action_id": 1,
          "to_action_id": -1,
          "event_name": "NonParticipationEvent",
          "event_info": "Voter decides not to participate",
          "fields": [
            {
              "name": "voter_id",
              "type": "string",
              "default_value": "unknown",
              "description": "Unique identifier for the voter deciding not to participate"
            },
            {
              "name": "reason_for_non_participation",
              "type": "string",
              "default_value": "none",
              "description": "Explanation or reason why the voter chooses not to participate"
            }
          ]
        }
      },
      "3": {
        "code": "class CandidateSelectionEvent(Event):\n    def __init__(self,\n        from_agent_id: str,\n        to_agent_id: str,\n        voter_id: str = 'unknown',\n        selected_candidate_id: str = 'none',\n        preference_score: float = 0.0,\n        **kwargs: Any\n    ) -> None:\n        super().__init__(from_agent_id=from_agent_id, to_agent_id=to_agent_id, **kwargs)\n        self.voter_id = voter_id\n        self.selected_candidate_id = selected_candidate_id\n        self.preference_score = preference_score",
        "metadata": {
          "id": 3,
          "from_agent_type": "VoterAgent",
          "from_action_name": "select_candidate",
          "to_agent_type": "EnvAgent",
          "to_action_name": "terminate",
          "from_action_id": 2,
          "to_action_id": -1,
          "event_name": "CandidateSelectionEvent",
          "event_info": "Voter selects a candidate based on preferences",
          "fields": [
            {
              "name": "voter_id",
              "type": "string",
              "default_value": "unknown",
              "description": "Unique identifier for the voter selecting a candidate"
            },
            {
              "name": "selected_candidate_id",
              "type": "string",
              "default_value": "none",
              "description": "Identifier for the candidate selected by the voter"
            },
            {
              "name": "preference_score",
              "type": "float",
              "default_value": "0.0",
              "description": "Score representing the voter's preference for the selected candidate"
            }
          ]
        }
      }
    }
  }
}