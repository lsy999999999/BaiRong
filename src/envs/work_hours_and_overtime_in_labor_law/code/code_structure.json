{
  "agents": {
    "Employee": {
      "imports": "from typing import Any, List,Optional\nimport json\nimport asyncio\nfrom loguru import logger\nfrom onesim.models import JsonBlockParser\nfrom onesim.agent import GeneralAgent\nfrom onesim.profile import AgentProfile\nfrom onesim.memory import MemoryStrategy\nfrom onesim.planning import PlanningBase\nfrom onesim.events import *\nfrom onesim.relationship import RelationshipManager\nfrom .events import *",
      "handlers": {
        "1": {
          "code": "async def request_overtime_pay(self, event: Event) -> List[Event]:\n        # No specific condition for this action, proceed directly\n        employee_id = self.profile.get_data(\"employee_id\", \"\")\n        overtime_hours = self.profile.get_data(\"overtime_hours\", 0.0)\n        overtime_reason = self.profile.get_data(\"overtime_reason\", \"\")\n    \n        # Prepare instruction for LLM reaction\n        instruction = \"\"\"Generate the next steps for the Employee requesting overtime pay.\n        Please return the information in the following JSON format:\n    \n        {\n        \"target_ids\": [\"<The string ID of the Employer agent>\"],\n        \"details\": {\n            \"employee_id\": \"<Unique identifier of the employee>\",\n            \"overtime_hours\": <Number of overtime hours claimed>,\n            \"overtime_reason\": \"<Reason for overtime work>\"\n        }\n        }\n        \"\"\"\n        \n        observation = f\"Employee ID: {employee_id}, Overtime Hours: {overtime_hours}, Overtime Reason: {overtime_reason}\"\n        result = await self.generate_reaction(instruction, observation)\n    \n        # Extract details and target_ids from the LLM's response\n        target_ids = result.get('target_ids', [])\n        details = result.get('details', {})\n    \n        if not isinstance(target_ids, list):\n            target_ids = [target_ids]\n    \n        # Create and send OvertimeRequestEvent to each target\n        events = []\n        for target_id in target_ids:\n            overtime_event = OvertimeRequestEvent(self.profile_id, target_id, **details)\n            events.append(overtime_event)\n    \n        return events",
          "metadata": {
            "id": 1,
            "name": "request_overtime_pay",
            "condition": null,
            "description": "The Employee initiates a request for overtime pay by submitting details of the overtime hours worked and the reason for the overtime.",
            "type": "OR",
            "required_variables": [
              {
                "name": "employee_id",
                "type": "str",
                "context": "agent",
                "description": "Unique identifier of the employee making the request."
              },
              {
                "name": "overtime_hours",
                "type": "float",
                "context": "agent",
                "description": "Number of overtime hours the employee claims to have worked."
              },
              {
                "name": "overtime_reason",
                "type": "str",
                "context": "agent",
                "description": "Reason provided by the employee for the overtime work."
              }
            ],
            "output_updates": []
          }
        }
      }
    },
    "Employer": {
      "imports": "from typing import Any, List, Optional\nimport json\nimport asyncio\nfrom loguru import logger\nfrom onesim.models import JsonBlockParser\nfrom onesim.agent import GeneralAgent\nfrom onesim.profile import AgentProfile\nfrom onesim.memory import MemoryStrategy\nfrom onesim.planning import PlanningBase\nfrom onesim.events import *\nfrom onesim.relationship import RelationshipManager\nfrom .events import *",
      "handlers": {
        "2": {
          "code": "async def defend_overtime_claim(self, event: Event) -> List[Event]:\n        # Check if the event is of the correct type\n        if event.__class__.__name__ != \"OvertimeRequestEvent\":\n            return []\n\n        # Extract necessary data from the event\n        employee_id = event.employee_id\n        overtime_hours = event.overtime_hours\n        overtime_reason = event.overtime_reason\n\n        # Retrieve required variables from agent context\n        employer_id = self.profile.get_data(\"employer_id\", \"\")\n\n        # Formulate the instruction for LLM\n        instruction = \"\"\"\n        The Employer needs to formulate a defense against an overtime pay claim.\n        Please provide the defense arguments and evidence documents in response to the employee's claim.\n        The response should include the following JSON format:\n        {\n            \"defense_arguments\": \"<Arguments against the overtime claim>\",\n            \"evidence_documents\": [\"<List of evidence document identifiers>\"],\n            \"target_ids\": [\"<The string ID of the Judge agent(s)>\"]\n        }\n        \"\"\"\n        observation = f\"Employee ID: {employee_id}, Overtime Hours: {overtime_hours}, Reason: {overtime_reason}\"\n\n        # Generate reaction using LLM\n        result = await self.generate_reaction(instruction, observation)\n\n        # Extract results\n        defense_arguments = result.get('defense_arguments', \"\")\n        evidence_documents = result.get('evidence_documents', [])\n        target_ids = result.get('target_ids', None)\n        if not isinstance(target_ids, list):\n            target_ids = [target_ids]\n\n        # Prepare and send the DefenseSubmissionEvent to the Judge(s)\n        events = []\n        for target_id in target_ids:\n            defense_event = DefenseSubmissionEvent(employer_id, target_id, employer_id, defense_arguments, evidence_documents)\n            events.append(defense_event)\n\n        return events",
          "metadata": {
            "id": 2,
            "name": "defend_overtime_claim",
            "condition": null,
            "description": "The Employer responds to the overtime pay request by providing a defense, which includes arguments and evidence against the claim.",
            "type": "OR",
            "required_variables": [
              {
                "name": "employer_id",
                "type": "str",
                "context": "agent",
                "description": "Unique identifier of the employer submitting the defense."
              },
              {
                "name": "defense_arguments",
                "type": "str",
                "context": "agent",
                "description": "Arguments provided by the employer against the overtime pay claim."
              },
              {
                "name": "evidence_documents",
                "type": "list",
                "context": "agent",
                "description": "List of document identifiers submitted as evidence by the employer."
              }
            ],
            "output_updates": []
          }
        }
      }
    },
    "Judge": {
      "imports": "from typing import Any, List\nimport asyncio\nfrom onesim.models import JsonBlockParser\nfrom onesim.agent import GeneralAgent\nfrom onesim.profile import AgentProfile\nfrom onesim.memory import MemoryStrategy\nfrom onesim.planning import PlanningBase\nfrom onesim.events import Event\nfrom onesim.relationship import RelationshipManager\nfrom .events import DefenseSubmissionEvent, OvertimeRequestEvent, JudgmentEvent",
      "handlers": {
        "3": {
          "code": "async def evaluate_overtime_claim(self, event: Event) -> List[Event]:\n        # Check if both required events are present in self.profile with actual event data\n        overtime_request_events = self.profile.get_events(\"OvertimeRequestEvent\")\n        defense_submission_events = self.profile.get_events(\"DefenseSubmissionEvent\")\n        \n        if not (overtime_request_events and defense_submission_events):\n            return []\n        \n        # Assuming we need the most recent event data for each\n        overtime_request_data = overtime_request_events[-1]\n        defense_submission_data = defense_submission_events[-1]\n        \n        # Retrieve necessary data\n        judge_id = self.profile.get_data(\"judge_id\", \"\")\n        defense_arguments = defense_submission_data.defense_arguments\n        evidence_documents = defense_submission_data.evidence_documents\n        overtime_hours = overtime_request_data.overtime_hours\n        overtime_reason = overtime_request_data.overtime_reason\n\n        # Prepare observation and instruction for generate_reaction\n        observation = f\"\"\"Judge ID: {judge_id}, Overtime Hours: {overtime_hours}, Overtime Reason: {overtime_reason}, Defense Arguments: {defense_arguments}, Evidence Documents: {evidence_documents}\"\"\"\n        instruction = \"\"\"Please evaluate the overtime claim based on the provided arguments and evidence. \n        Generate a ruling, legal references, and completion status. \n        Return the information in the following JSON format:\n    \n        {\n        \"ruling\": \"<The decision regarding the overtime pay dispute>\",\n        \"legal_references\": [\"<List of legal references or statutes cited>\"],\n        \"completion_status\": \"<Current status of the judgment process>\",\n        \"target_ids\": [\"<The string ID of the EnvAgent>\"]\n        }\n        \"\"\"\n    \n        # Generate the reaction using LLM\n        result = await self.generate_reaction(instruction, observation)\n    \n        # Parse the LLM's JSON response\n        ruling = result.get('ruling', \"\")\n        legal_references = result.get('legal_references', [])\n        completion_status = result.get('completion_status', \"Pending\")\n        target_ids = result.get('target_ids', [])\n        if not isinstance(target_ids, list):\n            target_ids = [target_ids]\n    \n        # Prepare and send the JudgmentEvent to each target\n        events = []\n        for target_id in target_ids:\n            judgment_event = JudgmentEvent(self.profile_id, target_id, judge_id, ruling, legal_references, completion_status)\n            events.append(judgment_event)\n    \n        return events",
          "metadata": {
            "id": 3,
            "name": "evaluate_overtime_claim",
            "condition": "Receipt of both OvertimeRequestEvent and DefenseSubmissionEvent",
            "description": "The Judge evaluates the overtime pay dispute by reviewing the arguments and evidence from both the Employee and the Employer, and delivers a ruling based on labor law.",
            "type": "OR",
            "required_variables": [
              {
                "name": "judge_id",
                "type": "str",
                "context": "agent",
                "description": "Unique identifier of the judge evaluating the claim."
              },
              {
                "name": "defense_arguments",
                "type": "str",
                "context": "event",
                "description": "Arguments provided by the employer against the overtime pay claim."
              },
              {
                "name": "evidence_documents",
                "type": "list",
                "context": "event",
                "description": "List of document identifiers submitted as evidence by the employer."
              },
              {
                "name": "overtime_hours",
                "type": "float",
                "context": "event",
                "description": "Number of overtime hours the employee claims to have worked."
              },
              {
                "name": "overtime_reason",
                "type": "str",
                "context": "event",
                "description": "Reason provided by the employee for the overtime work."
              }
            ],
            "output_updates": [
              {
                "name": "ruling",
                "type": "str",
                "context": "env",
                "description": "The decision made by the judge regarding the overtime pay dispute."
              },
              {
                "name": "legal_references",
                "type": "list",
                "context": "env",
                "description": "List of legal references or statutes cited in the ruling."
              },
              {
                "name": "completion_status",
                "type": "str",
                "context": "env",
                "description": "Current status of the judgment process."
              }
            ]
          }
        }
      }
    }
  },
  "events": {
    "imports": "from onesim.events import Event\nfrom typing import Any, List",
    "definitions": {
      "-1": {
        "code": "class StartEvent(Event):\n    def __init__(self,\n        from_agent_id: str,\n        to_agent_id: str,\n        **kwargs: Any\n    ) -> None:\n        super().__init__(from_agent_id=from_agent_id, to_agent_id=to_agent_id, **kwargs)",
        "metadata": {
          "id": -1,
          "from_agent_type": "EnvAgent",
          "from_action_name": "start",
          "to_agent_type": "Employee",
          "to_action_name": "request_overtime_pay",
          "from_action_id": 0,
          "to_action_id": 1,
          "event_name": "StartEvent",
          "event_info": "Initial trigger for the workflow: Employee initiates an overtime pay request",
          "fields": []
        }
      },
      "1": {
        "code": "class OvertimeRequestEvent(Event):\n    def __init__(self,\n        from_agent_id: str,\n        to_agent_id: str,\n        employee_id: str = \"\",\n        overtime_hours: float = 0.0,\n        overtime_reason: str = \"\",\n        **kwargs: Any\n    ) -> None:\n        super().__init__(from_agent_id=from_agent_id, to_agent_id=to_agent_id, employee_id=employee_id, \n                         overtime_hours=overtime_hours, overtime_reason=overtime_reason, **kwargs)\n        self.employee_id = employee_id\n        self.overtime_hours = overtime_hours\n        self.overtime_reason = overtime_reason",
        "metadata": {
          "id": 1,
          "from_agent_type": "Employee",
          "from_action_name": "request_overtime_pay",
          "to_agent_type": "Employer",
          "to_action_name": "defend_overtime_claim",
          "from_action_id": 1,
          "to_action_id": 2,
          "event_name": "OvertimeRequestEvent",
          "event_info": "Employee requests payment for overtime hours worked",
          "fields": [
            {
              "name": "employee_id",
              "type": "str",
              "default_value": "",
              "description": "Unique identifier of the employee making the request"
            },
            {
              "name": "overtime_hours",
              "type": "float",
              "default_value": 0.0,
              "description": "Number of overtime hours the employee claims to have worked"
            },
            {
              "name": "overtime_reason",
              "type": "str",
              "default_value": "",
              "description": "Reason provided by the employee for the overtime work"
            }
          ]
        }
      },
      "2": {
        "code": "class DefenseSubmissionEvent(Event):\n    def __init__(self,\n        from_agent_id: str,\n        to_agent_id: str,\n        employer_id: str = \"\",\n        defense_arguments: str = \"\",\n        evidence_documents: List[Any] = [],\n        **kwargs: Any\n    ) -> None:\n        super().__init__(from_agent_id=from_agent_id, to_agent_id=to_agent_id, employer_id=employer_id, \n                         defense_arguments=defense_arguments, evidence_documents=evidence_documents, **kwargs)\n        self.employer_id = employer_id\n        self.defense_arguments = defense_arguments\n        self.evidence_documents = evidence_documents",
        "metadata": {
          "id": 2,
          "from_agent_type": "Employer",
          "from_action_name": "defend_overtime_claim",
          "to_agent_type": "Judge",
          "to_action_name": "evaluate_overtime_claim",
          "from_action_id": 2,
          "to_action_id": 3,
          "event_name": "DefenseSubmissionEvent",
          "event_info": "Employer submits defense against the overtime pay claim",
          "fields": [
            {
              "name": "employer_id",
              "type": "str",
              "default_value": "",
              "description": "Unique identifier of the employer submitting the defense"
            },
            {
              "name": "defense_arguments",
              "type": "str",
              "default_value": "",
              "description": "Arguments provided by the employer against the overtime pay claim"
            },
            {
              "name": "evidence_documents",
              "type": "list",
              "default_value": [],
              "description": "List of document identifiers submitted as evidence by the employer"
            }
          ]
        }
      },
      "3": {
        "code": "class JudgmentEvent(Event):\n    def __init__(self,\n        from_agent_id: str,\n        to_agent_id: str,\n        judge_id: str = \"\",\n        ruling: str = \"\",\n        legal_references: List[Any] = [],\n        completion_status: str = 'Pending',\n        **kwargs: Any\n    ) -> None:\n        super().__init__(from_agent_id=from_agent_id, to_agent_id=to_agent_id, judge_id=judge_id, \n                         ruling=ruling, legal_references=legal_references, completion_status=completion_status, **kwargs)\n        self.judge_id = judge_id\n        self.ruling = ruling\n        self.legal_references = legal_references\n        self.completion_status = completion_status",
        "metadata": {
          "id": 3,
          "from_agent_type": "Judge",
          "from_action_name": "evaluate_overtime_claim",
          "to_agent_type": "EnvAgent",
          "to_action_name": "terminate",
          "from_action_id": 3,
          "to_action_id": -1,
          "event_name": "JudgmentEvent",
          "event_info": "Judge delivers a ruling on the overtime pay dispute based on labor law",
          "fields": [
            {
              "name": "judge_id",
              "type": "str",
              "default_value": "",
              "description": "Unique identifier of the judge delivering the ruling"
            },
            {
              "name": "ruling",
              "type": "str",
              "default_value": "",
              "description": "The decision made by the judge regarding the overtime pay dispute"
            },
            {
              "name": "legal_references",
              "type": "list",
              "default_value": [],
              "description": "List of legal references or statutes cited in the ruling"
            },
            {
              "name": "completion_status",
              "type": "str",
              "default_value": "Pending",
              "description": "Current status of the judgment process"
            }
          ]
        }
      }
    }
  }
}