{
  "agents": {
    "CognitiveAgent": {
      "imports": "from typing import Any, List, Optional\nimport json\nimport asyncio\nfrom loguru import logger\nfrom onesim.models import JsonBlockParser\nfrom onesim.agent import GeneralAgent\nfrom onesim.profile import AgentProfile\nfrom onesim.memory import MemoryStrategy\nfrom onesim.planning import PlanningBase\nfrom onesim.events import *\nfrom onesim.relationship import RelationshipManager\nfrom .events import *",
      "handlers": {
        "1": {
          "code": "async def initialize_intentions(self, event: Event) -> List[Event]:\n        # Retrieve required variables from agent profile\n        attitude = self.profile.get_data(\"attitude\", 0.0)\n        subjective_norm = self.profile.get_data(\"subjective_norm\", 0.0)\n        perceived_behavioral_control = self.profile.get_data(\"perceived_behavioral_control\", 0.0)\n    \n        # Calculate behavioral intentions using TPB components\n        behavioral_intentions = attitude + subjective_norm + perceived_behavioral_control\n        self.profile.update_data(\"behavioral_intentions\", behavioral_intentions)\n    \n        # Define instruction for LLM to determine target_ids for outgoing events\n        instruction = \"\"\"\n        The CognitiveAgent has initialized its behavioral intentions based on the Theory of Planned Behavior components.\n        Please determine the appropriate target_ids for sending the IntentionInitializedEvent.\n        Ensure the response is in the following JSON format:\n    \n        {\n        \"target_ids\": [\"<The string ID(s) of the SocialNormAgent(s)>\"]\n        }\n        \"\"\"\n    \n        # Generate reaction to determine target_ids for outgoing event\n        observation = f\"Behavioral Intentions: {behavioral_intentions}\"\n        result = await self.generate_reaction(instruction, observation)\n        target_ids = result.get('target_ids', None)\n    \n        # Ensure target_ids is a list\n        if not isinstance(target_ids, list):\n            target_ids = [target_ids]\n    \n        # Prepare and send IntentionInitializedEvent to each target_id\n        events = []\n        for target_id in target_ids:\n            intention_initialized_event = IntentionInitializedEvent(self.profile_id, target_id)\n            events.append(intention_initialized_event)\n    \n        return events",
          "metadata": {
            "id": 1,
            "name": "initialize_intentions",
            "condition": null,
            "description": "This action initializes the agent's behavioral intentions using the Theory of Planned Behavior components.",
            "type": "OR",
            "required_variables": [
              {
                "name": "attitude",
                "type": "float",
                "context": "agent",
                "description": "The agent's initial attitude towards the behavior."
              },
              {
                "name": "subjective_norm",
                "type": "float",
                "context": "agent",
                "description": "The agent's perception of social pressure to perform the behavior."
              },
              {
                "name": "perceived_behavioral_control",
                "type": "float",
                "context": "agent",
                "description": "The agent's perceived ease or difficulty of performing the behavior."
              }
            ],
            "output_updates": [
              {
                "name": "behavioral_intentions",
                "type": "float",
                "context": "agent",
                "description": "Initialized value of the agent's behavioral intentions."
              }
            ]
          }
        },
        "2": {
          "code": "async def calculate_behavioral_intentions(self, event: Event) -> List[Event]:\n        # Check if the event contains required data\n        if event.__class__.__name__ == \"SocialNormsEvaluatedEvent\":\n            social_norms_score = event.social_norms_score\n            self.profile.update_data(\"social_norms_score\", social_norms_score)\n        elif event.__class__.__name__ == \"SubjectiveNormsAdjustedEvent\":\n            adjusted_subjective_norms = event.adjusted_subjective_norms\n            self.profile.update_data(\"adjusted_subjective_norms\", adjusted_subjective_norms)\n        \n        # Ensure both required data are available in profile\n        if \"social_norms_score\" in self.profile and \"adjusted_subjective_norms\" in self.profile:\n            social_norms_score = self.profile.get_data(\"social_norms_score\", 0.0)\n            adjusted_subjective_norms = self.profile.get_data(\"adjusted_subjective_norms\", {})\n            \n            # Generate reaction using LLM\n            observation = f\"Social Norms Score: {social_norms_score}, Adjusted Subjective Norms: {adjusted_subjective_norms}\"\n            instruction = \"\"\"Calculate the behavioral intentions using the Theory of Planned Behavior components.\n            Return the results in the following JSON format:\n            {\n                \"behavioral_intentions\": <calculated_float_value>,\n                \"target_ids\": [\"<target_agent_id(s)>\"]\n            }\n            \"\"\"\n            \n            result = await self.generate_reaction(instruction, observation)\n            \n            # Parse the LLM's JSON response\n            behavioral_intentions = result.get('behavioral_intentions', 0.0)\n            target_ids = result.get('target_ids', [])\n            if not isinstance(target_ids, list):\n                target_ids = [target_ids]\n            \n            # Update agent's profile with the new behavioral intentions\n            self.profile.update_data(\"behavioral_intentions\", behavioral_intentions)\n            \n            # Prepare the event to send the calculated intentions\n            events = []\n            for target_id in target_ids:\n                tpb_components = {\n                    \"attitude\": self.profile.get_data(\"attitude\", 0.0),\n                    \"subjective_norm\": social_norms_score,\n                    \"perceived_behavioral_control\": self.profile.get_data(\"perceived_behavioral_control\", 0.0)\n                }\n                intention_event = BehavioralIntentionCalculatedEvent(\n                    self.profile_id, target_id, behavioral_intentions, tpb_components\n                )\n                events.append(intention_event)\n            \n            return events\n        \n        return []",
          "metadata": {
            "id": 2,
            "name": "calculate_behavioral_intentions",
            "condition": "Requires subjective norms and perceived behavioral control inputs",
            "description": "This action calculates the agent's behavioral intentions based on updated TPB components.",
            "type": "AND",
            "required_variables": [
              {
                "name": "adjusted_subjective_norms",
                "type": "dict",
                "context": "event",
                "description": "Adjusted subjective norms received from SocialNormAgent."
              },
              {
                "name": "social_norms_score",
                "type": "float",
                "context": "event",
                "description": "Score representing the influence of social norms on the agent's intentions."
              }
            ],
            "output_updates": [
              {
                "name": "behavioral_intentions",
                "type": "float",
                "context": "agent",
                "description": "Updated value of the agent's behavioral intentions after calculation."
              }
            ]
          }
        },
        "3": {
          "code": "async def finalize_behavior(self, event: Event) -> List[Event]:\n        # Check if the condition \"Requires ConstraintsAssessedEvent\" is met\n        if event.__class__.__name__ != \"ConstraintsAssessedEvent\":\n            return []\n        \n        # Retrieve required variables from the event\n        resource_availability = event.resource_availability\n        situational_constraints = event.situational_constraints\n    \n        # Ensure all required event data is present\n        if resource_availability is None or situational_constraints is None:\n            return []\n    \n        # Update agent's profile with the received data\n        self.profile.update_data(\"resource_availability\", resource_availability)\n        self.profile.update_data(\"situational_constraints\", situational_constraints)\n    \n        # Create observation context\n        observation = f\"Resource availability: {resource_availability}, Situational constraints: {situational_constraints}\"\n    \n        # Craft instruction for generating the reaction\n        instruction = \"\"\"Please finalize the behavior based on the calculated intentions and the provided environmental constraints.\n        Ensure to return the finalized behavior and completion status in the following JSON format:\n        {\n            \"final_behavior\": \"<The finalized behavior outcome>\",\n            \"completion_status\": \"<Status indicating completion of the behavior determination process>\",\n            \"target_ids\": [\"<The string ID of the EnvAgent, or a list of IDs>\"]\n        }\n        \"\"\"\n    \n        # Generate reaction using LLM\n        result = await self.generate_reaction(instruction, observation)\n    \n        # Extract results from the LLM response\n        final_behavior = result.get('final_behavior', \"undetermined\")\n        completion_status = result.get('completion_status', \"pending\")\n        target_ids = result.get('target_ids', [])\n    \n        # Ensure target_ids is a list\n        if not isinstance(target_ids, list):\n            target_ids = [target_ids]\n    \n        # Update agent's profile with the results\n        self.profile.update_data(\"final_behavior\", final_behavior)\n        self.profile.update_data(\"completion_status\", completion_status)\n    \n        # Prepare outgoing events\n        events = []\n        for target_id in target_ids:\n            behavior_finalized_event = BehaviorFinalizedEvent(self.profile_id, target_id, final_behavior, completion_status)\n            events.append(behavior_finalized_event)\n    \n        return events",
          "metadata": {
            "id": 3,
            "name": "finalize_behavior",
            "condition": "Requires ConstraintsAssessedEvent",
            "description": "This action finalizes the agent's behavior based on the calculated intentions and environmental constraints.",
            "type": "AND",
            "required_variables": [
              {
                "name": "resource_availability",
                "type": "float",
                "context": "event",
                "description": "Assessment of resources available to perform the intended behavior."
              },
              {
                "name": "situational_constraints",
                "type": "dict",
                "context": "event",
                "description": "Evaluated situational constraints affecting behavior."
              }
            ],
            "output_updates": [
              {
                "name": "final_behavior",
                "type": "string",
                "context": "agent",
                "description": "The finalized behavior outcome based on intention and environmental constraints."
              },
              {
                "name": "completion_status",
                "type": "string",
                "context": "agent",
                "description": "Status indicating whether the behavior determination process is complete."
              }
            ]
          }
        }
      }
    },
    "SocialNormAgent": {
      "imports": "from typing import Any, List, Optional\nimport json\nimport asyncio\nfrom loguru import logger\nfrom onesim.models import JsonBlockParser\nfrom onesim.agent import GeneralAgent\nfrom onesim.profile import AgentProfile\nfrom onesim.memory import MemoryStrategy\nfrom onesim.planning import PlanningBase\nfrom onesim.events import *\nfrom onesim.relationship import RelationshipManager\nfrom .events import *",
      "handlers": {
        "4": {
          "code": "async def evaluate_social_norms(self, event: Event) -> List[Event]:\n        observation = f\"Event received: {event.__class__.__name__} initiating social norms evaluation.\"\n        instruction = \"\"\"Evaluate the social norms affecting the agent and quantify their influence on the agent's intentions.\n        Please return the information in the following JSON format:\n        {\n            \"social_norms_score\": \"<A float representing the influence of social norms>\",\n            \"target_ids\": [\"<The string ID(s) of the CognitiveAgent(s) to send the evaluation results>\"]\n        }\n        \"\"\"\n        result = await self.generate_reaction(instruction, observation)\n        social_norms_score = result.get('social_norms_score', 0.0)\n        target_ids = result.get('target_ids', None)\n        if not isinstance(target_ids, list):\n            target_ids = [target_ids]\n        self.profile.update_data(\"social_norms_score\", social_norms_score)\n        events = []\n        for target_id in target_ids:\n            social_norms_evaluated_event = SocialNormsEvaluatedEvent(self.profile_id, target_id, social_norms_score=social_norms_score)\n            events.append(social_norms_evaluated_event)\n        return events",
          "metadata": {
            "id": 4,
            "name": "evaluate_social_norms",
            "condition": null,
            "description": "This action evaluates the social norms affecting the agent and quantifies their influence.",
            "type": "OR",
            "required_variables": [],
            "output_updates": [
              {
                "name": "social_norms_score",
                "type": "float",
                "context": "agent",
                "description": "Score representing the influence of social norms on the agent's intentions."
              }
            ]
          }
        },
        "5": {
          "code": "async def adjust_subjective_norms(self, event: Event) -> List[Event]:\n        if event.__class__.__name__ != \"IntentionInitializedEvent\":\n            return []\n        social_norms_score = self.profile.get_data(\"social_norms_score\", 0.0)\n        instruction = \"\"\"\n        Adjust the agent's subjective norms based on the evaluated social norms score.\n        Please return the information in the following JSON format:\n        \n        {\n        \"adjusted_subjective_norms\": {\"<norm_name>\": <adjusted_value>, ...},\n        \"target_ids\": [\"<The string ID of the CognitiveAgent>\"]\n        }\n        \"\"\"\n        observation = f\"Social norms score: {social_norms_score}\"\n        result = await self.generate_reaction(instruction, observation)\n        adjusted_subjective_norms = result.get('adjusted_subjective_norms', {})\n        target_ids = result.get('target_ids', [])\n        if not isinstance(target_ids, list):\n            target_ids = [target_ids]\n        self.profile.update_data(\"adjusted_subjective_norms\", adjusted_subjective_norms)\n        events = []\n        for target_id in target_ids:\n            norms_adjusted_event = SubjectiveNormsAdjustedEvent(self.profile_id, target_id, adjusted_subjective_norms)\n            events.append(norms_adjusted_event)\n        return events",
          "metadata": {
            "id": 5,
            "name": "adjust_subjective_norms",
            "condition": "Requires IntentionInitializedEvent",
            "description": "This action adjusts the agent's subjective norms based on the evaluated social norms.",
            "type": "OR",
            "required_variables": [
              {
                "name": "social_norms_score",
                "type": "float",
                "context": "event",
                "description": "Score representing the influence of social norms on the agent's intentions."
              }
            ],
            "output_updates": [
              {
                "name": "adjusted_subjective_norms",
                "type": "dict",
                "context": "agent",
                "description": "Dictionary containing adjusted values for subjective norms based on social influence."
              }
            ]
          }
        }
      }
    },
    "EnvironmentalAgent": {
      "imports": "from typing import Any, List,Optional\nimport json\nimport asyncio\nfrom loguru import logger\nfrom onesim.models import JsonBlockParser\nfrom onesim.agent import GeneralAgent\nfrom onesim.profile import AgentProfile\nfrom onesim.memory import MemoryStrategy\nfrom onesim.planning import PlanningBase\nfrom onesim.events import *\nfrom onesim.relationship import RelationshipManager\nfrom .events import *",
      "handlers": {
        "6": {
          "code": "async def assess_environmental_constraints(self, event: Event) -> List[Event]:\n        # Check if the event is of the required type\n        if event.__class__.__name__ != \"BehavioralIntentionCalculatedEvent\":\n            return []\n    \n        # Retrieve necessary environmental and agent data\n        resource_availability = await self.get_env_data(\"resource_availability\", 1.0)\n        situational_factors = await self.get_env_data(\"situational_factors\", {})\n        \n        # Prepare the observation and instruction for generate_reaction\n        observation = f\"Resource availability: {resource_availability}, Situational factors: {situational_factors}\"\n        instruction = \"\"\"\n        Assess the environmental constraints based on the provided resource availability and situational factors. \n        Determine the impact of these constraints on the intended behavior and provide updated values. \n        Additionally, decide on the target_ids for sending the ConstraintsAssessedEvent. \n        Please return the information in the following JSON format:\n    \n        {\n        \"resource_availability\": \"<Updated float value>\",\n        \"situational_constraints\": \"<Updated dict value>\",\n        \"target_ids\": [\"<List of target agent IDs>\"]\n        }\n        \"\"\"\n    \n        # Generate reaction using LLM\n        result = await self.generate_reaction(instruction, observation)\n        \n        # Parse the result\n        updated_resource_availability = result.get('resource_availability', resource_availability)\n        situational_constraints = result.get('situational_constraints', situational_factors)\n        target_ids = result.get('target_ids', [])\n        if not isinstance(target_ids, list):\n            target_ids = [target_ids]\n    \n        # Update agent's state with new data\n        self.profile.update_data(\"resource_availability\", updated_resource_availability)\n        self.profile.update_data(\"situational_constraints\", situational_constraints)\n    \n        # Prepare and send ConstraintsAssessedEvent to each target\n        events = []\n        for target_id in target_ids:\n            constraints_event = ConstraintsAssessedEvent(\n                self.profile_id, target_id, \n                updated_resource_availability, situational_constraints\n            )\n            events.append(constraints_event)\n    \n        return events",
          "metadata": {
            "id": 6,
            "name": "assess_environmental_constraints",
            "condition": "Requires BehavioralIntentionCalculatedEvent",
            "description": "This action assesses the environmental constraints such as resource availability and situational factors.",
            "type": "OR",
            "required_variables": [
              {
                "name": "resource_availability",
                "type": "float",
                "context": "env",
                "description": "Current level of resources available in the environment."
              },
              {
                "name": "situational_factors",
                "type": "dict",
                "context": "env",
                "description": "Current situational factors and constraints present in the environment."
              }
            ],
            "output_updates": [
              {
                "name": "resource_availability",
                "type": "float",
                "context": "agent",
                "description": "Assessment of resources available to perform the intended behavior."
              },
              {
                "name": "situational_constraints",
                "type": "dict",
                "context": "agent",
                "description": "Dictionary containing evaluated situational constraints affecting behavior."
              }
            ]
          }
        }
      }
    }
  },
  "events": {
    "imports": "from onesim.events import Event\nfrom typing import Dict, List, Any\nfrom datetime import datetime",
    "definitions": {
      "-1": {
        "code": "class StartEvent(Event):\n    def __init__(self,\n        from_agent_id: str,\n        to_agent_id: str,\n        **kwargs: Any\n    ) -> None:\n        super().__init__(from_agent_id=from_agent_id, to_agent_id=to_agent_id, **kwargs)",
        "metadata": {
          "id": -1,
          "from_agent_type": "EnvAgent",
          "from_action_name": "start",
          "to_agent_type": "CognitiveAgent",
          "to_action_name": "initialize_intentions",
          "from_action_id": 0,
          "to_action_id": 1,
          "event_name": "StartEvent",
          "event_info": "Initial trigger for CognitiveAgent to start processing behavioral intentions",
          "fields": []
        }
      },
      "-2": {
        "code": "class StartEvent(Event):\n    def __init__(self,\n        from_agent_id: str,\n        to_agent_id: str,\n        **kwargs: Any\n    ) -> None:\n        super().__init__(from_agent_id=from_agent_id, to_agent_id=to_agent_id, **kwargs)",
        "metadata": {
          "id": -2,
          "from_agent_type": "EnvAgent",
          "from_action_name": "start",
          "to_agent_type": "SocialNormAgent",
          "to_action_name": "evaluate_social_norms",
          "from_action_id": 0,
          "to_action_id": 4,
          "event_name": "StartEvent",
          "event_info": "Initial trigger for SocialNormAgent to start assessing social norms influence",
          "fields": []
        }
      },
      "1": {
        "code": "class IntentionInitializedEvent(Event):\n    def __init__(self,\n        from_agent_id: str,\n        to_agent_id: str,\n        **kwargs: Any\n    ) -> None:\n        super().__init__(from_agent_id=from_agent_id, to_agent_id=to_agent_id, **kwargs)",
        "metadata": {
          "id": 1,
          "from_agent_type": "CognitiveAgent",
          "from_action_name": "initialize_intentions",
          "to_agent_type": "SocialNormAgent",
          "to_action_name": "adjust_subjective_norms",
          "from_action_id": 1,
          "to_action_id": 5,
          "event_name": "IntentionInitializedEvent",
          "event_info": "CognitiveAgent initializes intentions and informs SocialNormAgent to adjust subjective norms",
          "fields": []
        }
      },
      "2": {
        "code": "class BehavioralIntentionCalculatedEvent(Event):\n    def __init__(self,\n        from_agent_id: str,\n        to_agent_id: str,\n        behavioral_intentions: float = 0.0,\n        TPB_components: dict = {},\n        **kwargs: Any\n    ) -> None:\n        super().__init__(from_agent_id=from_agent_id, to_agent_id=to_agent_id, **kwargs)\n        self.behavioral_intentions = behavioral_intentions\n        self.TPB_components = TPB_components",
        "metadata": {
          "id": 2,
          "from_agent_type": "CognitiveAgent",
          "from_action_name": "calculate_behavioral_intentions",
          "to_agent_type": "EnvironmentalAgent",
          "to_action_name": "assess_environmental_constraints",
          "from_action_id": 2,
          "to_action_id": 6,
          "event_name": "BehavioralIntentionCalculatedEvent",
          "event_info": "Calculated behavioral intentions are sent to EnvironmentalAgent for constraint assessment",
          "fields": [
            {
              "name": "behavioral_intentions",
              "type": "float",
              "default_value": "0.0",
              "description": "Calculated value representing the strength of behavioral intentions."
            },
            {
              "name": "TPB_components",
              "type": "dict",
              "default_value": "{}",
              "description": "Dictionary containing values for attitude, subjective norm, and perceived behavioral control."
            }
          ]
        }
      },
      "3": {
        "code": "class BehaviorFinalizedEvent(Event):\n    def __init__(self,\n        from_agent_id: str,\n        to_agent_id: str,\n        final_behavior: str = \"undetermined\",\n        completion_status: str = \"pending\",\n        **kwargs: Any\n    ) -> None:\n        super().__init__(from_agent_id=from_agent_id, to_agent_id=to_agent_id, **kwargs)\n        self.final_behavior = final_behavior\n        self.completion_status = completion_status",
        "metadata": {
          "id": 3,
          "from_agent_type": "CognitiveAgent",
          "from_action_name": "finalize_behavior",
          "to_agent_type": "EnvAgent",
          "to_action_name": "terminate",
          "from_action_id": 3,
          "to_action_id": -1,
          "event_name": "BehaviorFinalizedEvent",
          "event_info": "Final behavior determination sent to EnvAgent to terminate the process",
          "fields": [
            {
              "name": "final_behavior",
              "type": "string",
              "default_value": "undetermined",
              "description": "The finalized behavior outcome based on intention and environmental constraints."
            },
            {
              "name": "completion_status",
              "type": "string",
              "default_value": "pending",
              "description": "Status indicating whether the behavior determination process is complete."
            }
          ]
        }
      },
      "4": {
        "code": "class SocialNormsEvaluatedEvent(Event):\n    def __init__(self,\n        from_agent_id: str,\n        to_agent_id: str,\n        social_norms_score: float = 0.0,\n        **kwargs: Any\n    ) -> None:\n        super().__init__(from_agent_id=from_agent_id, to_agent_id=to_agent_id, **kwargs)\n        self.social_norms_score = social_norms_score",
        "metadata": {
          "id": 4,
          "from_agent_type": "SocialNormAgent",
          "from_action_name": "evaluate_social_norms",
          "to_agent_type": "CognitiveAgent",
          "to_action_name": "calculate_behavioral_intentions",
          "from_action_id": 4,
          "to_action_id": 2,
          "event_name": "SocialNormsEvaluatedEvent",
          "event_info": "Social norms evaluation results sent to CognitiveAgent for intention calculation",
          "fields": [
            {
              "name": "social_norms_score",
              "type": "float",
              "default_value": "0.0",
              "description": "Score representing the influence of social norms on the agent's intentions."
            }
          ]
        }
      },
      "5": {
        "code": "class SubjectiveNormsAdjustedEvent(Event):\n    def __init__(self,\n        from_agent_id: str,\n        to_agent_id: str,\n        adjusted_subjective_norms: dict = {},\n        **kwargs: Any\n    ) -> None:\n        super().__init__(from_agent_id=from_agent_id, to_agent_id=to_agent_id, **kwargs)\n        self.adjusted_subjective_norms = adjusted_subjective_norms",
        "metadata": {
          "id": 5,
          "from_agent_type": "SocialNormAgent",
          "from_action_name": "adjust_subjective_norms",
          "to_agent_type": "CognitiveAgent",
          "to_action_name": "calculate_behavioral_intentions",
          "from_action_id": 5,
          "to_action_id": 2,
          "event_name": "SubjectiveNormsAdjustedEvent",
          "event_info": "Adjusted subjective norms sent to CognitiveAgent for intention recalculation",
          "fields": [
            {
              "name": "adjusted_subjective_norms",
              "type": "dict",
              "default_value": "{}",
              "description": "Dictionary containing adjusted values for subjective norms based on social influence."
            }
          ]
        }
      },
      "6": {
        "code": "class ConstraintsAssessedEvent(Event):\n    def __init__(self,\n        from_agent_id: str,\n        to_agent_id: str,\n        resource_availability: float = 1.0,\n        situational_constraints: dict = {},\n        **kwargs: Any\n    ) -> None:\n        super().__init__(from_agent_id=from_agent_id, to_agent_id=to_agent_id, **kwargs)\n        self.resource_availability = resource_availability\n        self.situational_constraints = situational_constraints",
        "metadata": {
          "id": 6,
          "from_agent_type": "EnvironmentalAgent",
          "from_action_name": "assess_environmental_constraints",
          "to_agent_type": "CognitiveAgent",
          "to_action_name": "finalize_behavior",
          "from_action_id": 6,
          "to_action_id": 3,
          "event_name": "ConstraintsAssessedEvent",
          "event_info": "Environmental constraints assessed, results sent to CognitiveAgent to finalize behavior",
          "fields": [
            {
              "name": "resource_availability",
              "type": "float",
              "default_value": "1.0",
              "description": "Assessment of resources available to perform the intended behavior."
            },
            {
              "name": "situational_constraints",
              "type": "dict",
              "default_value": "{}",
              "description": "Dictionary containing evaluated situational constraints affecting behavior."
            }
          ]
        }
      }
    }
  }
}