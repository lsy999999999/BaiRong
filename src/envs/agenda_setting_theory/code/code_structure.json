{
  "agents": {
    "MediaAgent": {
      "imports": "from typing import Any, List,Optional\nimport json\nimport asyncio\nfrom loguru import logger\nfrom onesim.models import JsonBlockParser\nfrom onesim.agent import GeneralAgent\nfrom onesim.profile import AgentProfile\nfrom onesim.memory import MemoryStrategy\nfrom onesim.planning import PlanningBase\nfrom onesim.events import *\nfrom onesim.relationship import RelationshipManager\nfrom .events import *",
      "handlers": {
        "1": {
          "code": "async def select_topic(self, event: Event) -> List[Event]:\n        # Condition Check: Access to topic library\n        topic_library = await self.get_env_data(\"topic_library\", [])\n        if not topic_library:\n            return []\n    \n        # Decision Making: Generate reaction to select a topic\n        instruction = \"\"\"\n        You are a MediaAgent tasked with selecting a topic from the topic library to report on.\n        Your goal is to influence public agenda by choosing a topic that will have significant impact.\n        Please select a topic from the library and decide on the target IDs to send the 'TopicSelectedEvent'.\n        Ensure the response is in the following JSON format:\n    \n        {\n        \"selected_topic\": \"<The topic selected from the topic library>\",\n        \"target_ids\": [\"<The string ID(s) of the MediaAgent(s) to emphasize the topic>\"]\n        }\n        \"\"\"\n        observation = f\"Available topics: {topic_library}\"\n        result = await self.generate_reaction(instruction, observation)\n    \n        # Parse the LLM's JSON response\n        selected_topic = result.get('selected_topic', None)\n        target_ids = result.get('target_ids', None)\n        if not isinstance(target_ids, list):\n            target_ids = [target_ids]\n    \n        # Update agent's profile with the selected topic\n        self.profile.update_data(\"selected_topic\", selected_topic)\n    \n        # Prepare and send TopicSelectedEvent to the emphasize_topic action of MediaAgent(s)\n        events = []\n        for target_id in target_ids:\n            topic_selected_event = TopicSelectedEvent(self.profile_id, target_id, topic_id=selected_topic, media_agent_id=self.profile_id)\n            events.append(topic_selected_event)\n    \n        return events",
          "metadata": {
            "id": 1,
            "name": "select_topic",
            "condition": "Access to topic library",
            "description": "The MediaAgent selects a topic from the topic library to report on, initiating the process of influencing public agenda.",
            "type": "OR",
            "required_variables": [
              {
                "name": "topic_library",
                "type": "list",
                "context": "env",
                "description": "A collection of topics available for selection by the MediaAgent."
              }
            ],
            "output_updates": [
              {
                "name": "selected_topic",
                "type": "string",
                "context": "agent",
                "description": "The topic that has been selected by the MediaAgent for reporting."
              }
            ]
          }
        },
        "2": {
          "code": "async def emphasize_topic(self, event: Event) -> List[Event]:\n        # Check if the condition \"Topic selected for reporting\" is met\n        selected_topic = self.profile.get_data(\"selected_topic\", \"\")\n        if not selected_topic:\n            return []\n    \n        # Retrieve required variables\n        reporting_frequency = self.profile.get_data(\"reporting_frequency\", 0)\n        emotional_tone = self.profile.get_data(\"emotional_tone\", \"neutral\")\n        media_agent_id = self.profile_id\n    \n        observation = f\"Selected topic: {selected_topic}, Reporting frequency: {reporting_frequency}, Emotional tone: {emotional_tone}\"\n        instruction = \"\"\"Emphasize the selected topic through increased reporting frequency and emotional language to influence public perception and attention. \n        Decide on the target PublicAgent(s) to send the TopicEmphasizedEvent. Return the information in the following JSON format:\n    \n        {\n        \"target_ids\": [\"<The string ID(s) of the PublicAgent(s)>\"]\n        }\n        \"\"\"\n    \n        # Generate reaction to decide on target_ids\n        result = await self.generate_reaction(instruction, observation)\n        target_ids = result.get('target_ids', [])\n        if not isinstance(target_ids, list):\n            target_ids = [target_ids]\n    \n        # Prepare and send the TopicEmphasizedEvent to the PublicAgent(s)\n        events = []\n        for target_id in target_ids:\n            topic_emphasized_event = TopicEmphasizedEvent(\n                self.profile_id,\n                target_id,\n                topic_id=selected_topic,\n                reporting_frequency=reporting_frequency,\n                emotional_tone=emotional_tone,\n                media_agent_id=media_agent_id\n            )\n            events.append(topic_emphasized_event)\n    \n        return events",
          "metadata": {
            "id": 2,
            "name": "emphasize_topic",
            "condition": "Topic selected for reporting",
            "description": "The MediaAgent emphasizes the selected topic through increased reporting frequency and emotional language to influence public perception and attention.",
            "type": "OR",
            "required_variables": [
              {
                "name": "selected_topic",
                "type": "string",
                "context": "agent",
                "description": "The topic selected by the MediaAgent to be emphasized."
              },
              {
                "name": "reporting_frequency",
                "type": "int",
                "context": "agent",
                "description": "The frequency at which the MediaAgent reports on the selected topic."
              },
              {
                "name": "emotional_tone",
                "type": "string",
                "context": "agent",
                "description": "The emotional tone used by the MediaAgent in reporting, which can affect public perception."
              }
            ],
            "output_updates": [
              {
                "name": "emphasized_topic",
                "type": "string",
                "context": "agent",
                "description": "The topic that has been emphasized by the MediaAgent."
              }
            ]
          }
        }
      }
    },
    "PublicAgent": {
      "imports": "from typing import Any, List,Optional\nimport json\nimport asyncio\nfrom loguru import logger\nfrom onesim.models import JsonBlockParser\nfrom onesim.agent import GeneralAgent\nfrom onesim.profile import AgentProfile\nfrom onesim.memory import MemoryStrategy\nfrom onesim.planning import PlanningBase\nfrom onesim.events import *\nfrom onesim.relationship import RelationshipManager\nfrom .events import *",
      "handlers": {
        "3": {
          "code": "async def adjust_focus(self, event: Event) -> List[Event]:\n        # Condition Check: Ensure the event is of type 'TopicEmphasizedEvent'\n        if event.__class__.__name__ != \"TopicEmphasizedEvent\":\n            return []\n    \n        # Access event data\n        emphasized_topic = event.topic_id\n        reporting_frequency = event.reporting_frequency\n        emotional_tone = event.emotional_tone\n    \n        # Access agent data\n        current_focus_value = self.profile.get_data(\"focus_value\", 0.0)\n    \n        # Generate reaction for decision making\n        instruction = f\"\"\"\n        Adjust the focus value for the topic '{emphasized_topic}' based on the reporting frequency '{reporting_frequency}' and emotional tone '{emotional_tone}'.\n        Please provide the updated focus value and specify the target_ids, which can be a single ID or a list of IDs. Target should be 'ENV' for terminal events.\n    \n        Return the information in the following JSON format:\n        {{\n            \"new_focus_value\": <Updated focus value as a float>,\n            \"target_ids\": [\"ENV\"]\n        }}\n        \"\"\"\n        observation = f\"Current focus value: {current_focus_value}, Reporting frequency: {reporting_frequency}, Emotional tone: {emotional_tone}\"\n        result = await self.generate_reaction(instruction, observation)\n    \n        # Parse LLM response\n        new_focus_value = result.get('new_focus_value', current_focus_value)\n        target_ids = result.get('target_ids', [])\n        if not isinstance(target_ids, list):\n            target_ids = [target_ids]\n    \n        # Update agent data\n        self.profile.update_data(\"focus_value\", new_focus_value)\n    \n        # Prepare and send FocusAdjustedEvent to EnvAgent\n        events = []\n        for target_id in target_ids:\n            focus_adjusted_event = FocusAdjustedEvent(\n                public_agent_id=self.profile_id,\n                topic_id=emphasized_topic,\n                new_focus_value=new_focus_value\n            )\n            events.append(focus_adjusted_event)\n    \n        return events",
          "metadata": {
            "id": 3,
            "name": "adjust_focus",
            "condition": "Receive emphasized topic report",
            "description": "The PublicAgent adjusts its focus based on the reporting frequency and emotional presentation of the topic by the MediaAgent.",
            "type": "OR",
            "required_variables": [
              {
                "name": "emphasized_topic",
                "type": "string",
                "context": "event",
                "description": "The topic that has been emphasized by the MediaAgent."
              },
              {
                "name": "reporting_frequency",
                "type": "int",
                "context": "event",
                "description": "The frequency of reports made about the topic."
              },
              {
                "name": "emotional_tone",
                "type": "string",
                "context": "event",
                "description": "The emotional tone used in the reporting."
              }
            ],
            "output_updates": [
              {
                "name": "focus_value",
                "type": "float",
                "context": "agent",
                "description": "The updated focus value of the PublicAgent on the emphasized topic."
              }
            ]
          }
        }
      }
    }
  },
  "events": {
    "imports": "from onesim.events import Event\nfrom typing import Dict, List, Any        \nfrom datetime import datetime\nfrom typing import Any, List\nfrom datetime import datetime\nfrom onesim.events import Event\nfrom typing import Any, List\nfrom datetime import datetime\nfrom onesim.events import Event\nfrom typing import Any, List\nfrom datetime import datetime\nfrom onesim.events import Event\nfrom typing import Any, List\nfrom datetime import datetime\nfrom onesim.events import Event",
    "definitions": {
      "-1": {
        "code": "class StartEvent(Event):\n    def __init__(self,\n        from_agent_id: str,\n        to_agent_id: str,\n        **kwargs: Any\n    ) -> None:\n        super().__init__(from_agent_id=from_agent_id, to_agent_id=to_agent_id, **kwargs)\n\nfrom typing import Any, List\nfrom datetime import datetime\nfrom onesim.events import Event",
        "metadata": {
          "id": -1,
          "from_agent_type": "EnvAgent",
          "from_action_name": "start",
          "to_agent_type": "MediaAgent",
          "to_action_name": "select_topic",
          "from_action_id": 0,
          "to_action_id": 1,
          "event_name": "StartEvent",
          "event_info": "Initial trigger for topic selection process",
          "fields": []
        }
      },
      "1": {
        "code": "class TopicSelectedEvent(Event):\n    def __init__(self,\n        from_agent_id: str,\n        to_agent_id: str,\n        topic_id: str = \"\",\n        media_agent_id: str = \"\",\n        **kwargs: Any\n    ) -> None:\n        super().__init__(from_agent_id=from_agent_id, to_agent_id=to_agent_id, **kwargs)\n        self.topic_id = topic_id\n        self.media_agent_id = media_agent_id",
        "metadata": {
          "id": 1,
          "from_agent_type": "MediaAgent",
          "from_action_name": "select_topic",
          "to_agent_type": "MediaAgent",
          "to_action_name": "emphasize_topic",
          "from_action_id": 1,
          "to_action_id": 2,
          "event_name": "TopicSelectedEvent",
          "event_info": "Topic selected for reporting",
          "fields": [
            {
              "name": "topic_id",
              "type": "string",
              "default_value": "",
              "description": "Unique identifier for the topic selected by the MediaAgent."
            },
            {
              "name": "media_agent_id",
              "type": "string",
              "default_value": "",
              "description": "Unique identifier for the MediaAgent selecting the topic."
            }
          ]
        }
      },
      "2": {
        "code": "class TopicEmphasizedEvent(Event):\n    def __init__(self,\n        from_agent_id: str,\n        to_agent_id: str,\n        topic_id: str = \"\",\n        reporting_frequency: int = 0,\n        emotional_tone: str = 'neutral',\n        media_agent_id: str = \"\",\n        **kwargs: Any\n    ) -> None:\n        super().__init__(from_agent_id=from_agent_id, to_agent_id=to_agent_id, **kwargs)\n        self.topic_id = topic_id\n        self.reporting_frequency = reporting_frequency\n        self.emotional_tone = emotional_tone\n        self.media_agent_id = media_agent_id\n\nfrom typing import Any, List\nfrom datetime import datetime\nfrom onesim.events import Event",
        "metadata": {
          "id": 2,
          "from_agent_type": "MediaAgent",
          "from_action_name": "emphasize_topic",
          "to_agent_type": "PublicAgent",
          "to_action_name": "adjust_focus",
          "from_action_id": 2,
          "to_action_id": 3,
          "event_name": "TopicEmphasizedEvent",
          "event_info": "Topic emphasized through reporting frequency and emotional language",
          "fields": [
            {
              "name": "topic_id",
              "type": "string",
              "default_value": "",
              "description": "Unique identifier for the topic being emphasized."
            },
            {
              "name": "reporting_frequency",
              "type": "int",
              "default_value": 0,
              "description": "Frequency of reports made about the topic."
            },
            {
              "name": "emotional_tone",
              "type": "string",
              "default_value": "neutral",
              "description": "Emotional tone used in the reporting, e.g., 'neutral', 'positive', 'negative'."
            },
            {
              "name": "media_agent_id",
              "type": "string",
              "default_value": "",
              "description": "Unique identifier for the MediaAgent emphasizing the topic."
            }
          ]
        }
      },
      "3": {
        "code": "class FocusAdjustedEvent(Event):\n    def __init__(self,\n        from_agent_id: str,\n        to_agent_id: str,\n        public_agent_id: str = \"\",\n        topic_id: str = \"\",\n        new_focus_value: float = 0.0,\n        **kwargs: Any\n    ) -> None:\n        super().__init__(from_agent_id=from_agent_id, to_agent_id=to_agent_id, **kwargs)\n        self.public_agent_id = public_agent_id\n        self.topic_id = topic_id\n        self.new_focus_value = new_focus_value\n\nfrom typing import Any, List\nfrom datetime import datetime\nfrom onesim.events import Event",
        "metadata": {
          "id": 3,
          "from_agent_type": "PublicAgent",
          "from_action_name": "adjust_focus",
          "to_agent_type": "EnvAgent",
          "to_action_name": "terminate",
          "from_action_id": 3,
          "to_action_id": -1,
          "event_name": "FocusAdjustedEvent",
          "event_info": "Public focus adjusted based on media reporting",
          "fields": [
            {
              "name": "public_agent_id",
              "type": "string",
              "default_value": "",
              "description": "Unique identifier for the PublicAgent adjusting their focus."
            },
            {
              "name": "topic_id",
              "type": "string",
              "default_value": "",
              "description": "Unique identifier for the topic that the public focus is being adjusted to."
            },
            {
              "name": "new_focus_value",
              "type": "float",
              "default_value": 0.0,
              "description": "New focus value of the PublicAgent on the topic after adjustment."
            }
          ]
        }
      }
    }
  }
}