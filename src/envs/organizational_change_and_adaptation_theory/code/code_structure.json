{
  "agents": {
    "LeaderAgent": {
      "imports": "from typing import Any, List\nimport asyncio\nfrom onesim.models import JsonBlockParser\nfrom onesim.agent import GeneralAgent\nfrom onesim.profile import AgentProfile\nfrom onesim.memory import MemoryStrategy\nfrom onesim.planning import PlanningBase\nfrom onesim.events import Event\nfrom onesim.relationship import RelationshipManager\nfrom .events import *",
      "handlers": {
        "1": {
          "code": "async def initiate_change_process(self, event: Event) -> List[Event]:\n        # Retrieve required variables from environment and agent profile\n        change_type = await self.get_env_data(\"change_type\", \"incremental\")\n        change_goals = self.profile.get_data(\"change_goals\", \"\")\n\n        # Update the environment's change status\n        self.env.update_data(\"change_status\", \"Change process initiated\")\n\n        # Generate LLM reaction to decide on target_ids\n        instruction = f\"\"\"\n        The LeaderAgent has initiated a change process. The following details are available:\n        - Change type: {change_type}\n        - Change goals: {change_goals}\n\n        Please determine the appropriate ManagerAgent(s) to receive the next event. \n        Return the response in the following JSON format:\n        {{\n            \"change_type\": \"<Type of change>\",\n            \"change_goals\": \"<Goals of the change process>\",\n            \"target_ids\": [\"<List of ManagerAgent IDs>\"]\n        }}\n        \"\"\"\n\n        result = await self.generate_reaction(instruction)\n\n        # Extract data from LLM response\n        change_type = result.get(\"change_type\", change_type)\n        change_goals = result.get(\"change_goals\", change_goals)\n        target_ids = result.get(\"target_ids\", [])\n        if not isinstance(target_ids, list):\n            target_ids = [target_ids]\n\n        # Prepare and send ChangeInitiatedEvent to each target ManagerAgent\n        events = []\n        for target_id in target_ids:\n            change_event = ChangeInitiatedEvent(\n                self.profile_id, target_id, change_type=change_type, change_goals=change_goals, leader_id=self.profile_id\n            )\n            events.append(change_event)\n\n        return events",
          "metadata": {
            "id": 1,
            "name": "initiate_change_process",
            "condition": null,
            "description": "The leader initiates the change process by defining and communicating the goals of the change to the organization.",
            "type": "OR",
            "required_variables": [
              {
                "name": "change_type",
                "type": "string",
                "context": "env",
                "description": "Type of change being initiated (incremental, rapid, strategic)"
              },
              {
                "name": "change_goals",
                "type": "string",
                "context": "agent",
                "description": "Goals of the change process"
              }
            ],
            "output_updates": [
              {
                "name": "change_status",
                "type": "string",
                "context": "env",
                "description": "Current status of the change process"
              }
            ]
          }
        },
        "5": {
          "code": "async def finalize_change_process(self, event: Event) -> List[Event]:\n        # Ensure the event is of correct type\n        if not isinstance(event, StrategyAdjustedEvent):\n            return []  # Return empty list if event is not valid\n\n        # Access required event data\n        adjusted_strategy = getattr(event, 'adjusted_strategy', '')\n        manager_id = getattr(event, 'manager_id', '')\n\n        # Prepare observation and instruction for LLM\n        observation = f\"Adjusted Strategy: {adjusted_strategy}, Manager ID: {manager_id}\"\n        instruction = \"\"\"\n        Evaluate the adjusted strategy and finalize the change process. Document the outcomes. \n        Please return the information in the following JSON format:\n\n        {\n            \"final_report\": \"<A detailed report of the adjusted strategy and outcomes>\",\n            \"target_ids\": [\"<The string ID of the EnvAgent>\"]\n        }\n        \"\"\"\n\n        # Generate reaction using LLM\n        result = await self.generate_reaction(instruction, observation)\n\n        # Extract data from LLM response\n        final_report = result.get('final_report', None)\n        target_ids = result.get('target_ids', None)\n        if not isinstance(target_ids, list):\n            target_ids = [target_ids]\n\n        # Update agent's state with the final report\n        self.profile.update_data(\"final_report\", final_report)\n\n        # Prepare and send ChangeFinalizedEvent to EnvAgent\n        events = []\n        for target_id in target_ids:\n            change_finalized_event = ChangeFinalizedEvent(\n                self.profile_id, target_id, leader_id=self.profile_id, completion_status=\"success\", results=final_report\n            )\n            events.append(change_finalized_event)\n\n        return events",
          "metadata": {
            "id": 5,
            "name": "finalize_change_process",
            "condition": null,
            "description": "The leader finalizes the change process by evaluating its success and documenting the outcomes.",
            "type": "OR",
            "required_variables": [
              {
                "name": "completion_status",
                "type": "string",
                "context": "event",
                "description": "Status of the change process completion"
              },
              {
                "name": "results",
                "type": "string",
                "context": "event",
                "description": "Results and outcomes of the change process"
              }
            ],
            "output_updates": [
              {
                "name": "final_report",
                "type": "string",
                "context": "agent",
                "description": "Final report detailing the change process outcomes"
              }
            ]
          }
        }
      }
    },
    "ManagerAgent": {
      "imports": "from typing import Any, List, Optional\nimport json\nimport asyncio\nfrom loguru import logger\nfrom onesim.models import JsonBlockParser\nfrom onesim.agent import GeneralAgent\nfrom onesim.profile import AgentProfile\nfrom onesim.memory import MemoryStrategy\nfrom onesim.planning import PlanningBase\nfrom onesim.events import *\nfrom onesim.relationship import RelationshipManager\nfrom .events import *",
      "handlers": {
        "2": {
          "code": "async def execute_change_plan(self, event: Event) -> List[Event]:\n        # Check for the receipt of ChangeInitiatedEvent\n        if not isinstance(event, ChangeInitiatedEvent):\n            return []\n\n        # Access required event data\n        change_type = event.change_type\n        change_goals = event.change_goals\n        leader_id = event.leader_id\n\n        # Derive execution plan directly from event data\n        execution_plan = f\"Executing {change_type} change with goals: {change_goals} (initiated by Leader ID: {leader_id})\"\n\n        # Generate instruction for LLM\n        instruction = \"\"\"\n        The manager is executing the change plan. Coordinate resources and ensure the plan is followed.\n        Please return the information in the following JSON format:\n        {\n            \"execution_status\": \"<Status of the change plan execution>\",\n            \"target_ids\": [\"<The string ID of the Employee agent(s)>\"]\n        }\n        \"\"\"\n\n        observation = f\"Change Type: {change_type}, Change Goals: {change_goals}, Leader ID: {leader_id}\"\n\n        # Generate reaction using LLM\n        result = await self.generate_reaction(instruction, observation)\n\n        execution_status = result.get('execution_status', \"Execution in progress\")\n        target_ids = result.get('target_ids', None)\n\n        if not target_ids:\n            return []\n\n        if not isinstance(target_ids, list):\n            target_ids = [target_ids]\n\n        # Update execution status\n        self.profile.update_data(\"execution_status\", execution_status)\n\n        # Prepare and send ChangeExecutionEvent to EmployeeAgent(s)\n        events = []\n        for target_id in target_ids:\n            change_execution_event = ChangeExecutionEvent(\n                self.profile_id,\n                target_id,\n                manager_id=self.profile_id,\n                execution_plan=execution_plan\n            )\n            events.append(change_execution_event)\n\n        return events",
          "metadata": {
            "id": 2,
            "name": "execute_change_plan",
            "condition": "Receipt of ChangeInitiatedEvent and employee feedback",
            "description": "The manager executes the change plan, coordinating resources and ensuring the plan is followed.",
            "type": "OR",
            "required_variables": [
              {
                "name": "execution_plan",
                "type": "string",
                "context": "event",
                "description": "Details of the change execution plan"
              }
            ],
            "output_updates": [
              {
                "name": "execution_status",
                "type": "string",
                "context": "agent",
                "description": "Status of the change plan execution"
              }
            ]
          }
        },
        "4": {
          "code": "async def adjust_change_strategy(self, event: Event) -> List[Event]:\n        # Check if the event is a FeedbackEvent\n        if not isinstance(event, FeedbackEvent):\n            return []\n\n        # Retrieve required variables from the event\n        feedback = event.feedback\n        emotional_response = event.emotional_response\n\n        # Prepare instruction for generate_reaction\n        instruction = \"\"\"\n        Based on the feedback and emotional response from the employee, adjust the change strategy.\n        Return the adjusted strategy details and determine the target_ids, which can be a single ID or a list of IDs.\n        The response should be in the following JSON format:\n\n        {\n            \"adjusted_strategy\": \"<Details of the adjusted strategy>\",\n            \"target_ids\": [\"<The ID of the LeaderAgent(s) to notify>\"]\n        }\n        \"\"\"\n\n        # Observation context for the LLM\n        observation = f\"Feedback: {feedback}, Emotional Response: {emotional_response}\"\n\n        # Generate reaction using the LLM\n        result = await self.generate_reaction(instruction, observation)\n\n        # Parse the LLM's JSON response\n        adjusted_strategy = result.get('adjusted_strategy', None)\n        target_ids = result.get('target_ids', None)\n\n        if not target_ids:\n            return []\n\n        if not isinstance(target_ids, list):\n            target_ids = [target_ids]\n\n        # Update the agent's profile with the adjusted strategy\n        self.profile.update_data(\"adjusted_strategy\", adjusted_strategy)\n\n        # Prepare and send StrategyAdjustedEvent to each target_id\n        events = []\n        for target_id in target_ids:\n            strategy_adjusted_event = StrategyAdjustedEvent(\n                from_agent_id=self.profile_id,\n                to_agent_id=target_id,\n                manager_id=self.profile_id,\n                adjusted_strategy=adjusted_strategy\n            )\n            events.append(strategy_adjusted_event)\n\n        return events",
          "metadata": {
            "id": 4,
            "name": "adjust_change_strategy",
            "condition": "Receipt of FeedbackEvent",
            "description": "The manager adjusts the change strategy based on feedback from employees.",
            "type": "OR",
            "required_variables": [
              {
                "name": "feedback",
                "type": "string",
                "context": "event",
                "description": "Feedback provided by the employee"
              },
              {
                "name": "emotional_response",
                "type": "string",
                "context": "event",
                "description": "Emotional response of the employee to the change"
              }
            ],
            "output_updates": [
              {
                "name": "adjusted_strategy",
                "type": "string",
                "context": "agent",
                "description": "Details of the adjusted strategy based on feedback"
              }
            ]
          }
        }
      }
    },
    "EmployeeAgent": {
      "imports": "from typing import Any, List, Optional\nimport json\nimport asyncio\nfrom loguru import logger\nfrom onesim.models import JsonBlockParser\nfrom onesim.agent import GeneralAgent\nfrom onesim.profile import AgentProfile\nfrom onesim.memory import MemoryStrategy\nfrom onesim.planning import PlanningBase\nfrom onesim.events import *\nfrom onesim.relationship import RelationshipManager\nfrom .events import *",
      "handlers": {
        "3": {
          "code": "async def respond_to_change(self, event: Event) -> List[Event]:\n        # Retrieve required variables from the event\n        manager_id = event.manager_id\n        execution_plan = event.execution_plan\n\n        # Prepare observation and instruction for LLM\n        observation = f\"Manager ID: {manager_id}, Execution plan: {execution_plan}, Employee role: {self.profile.role}\"\n        instruction = \"\"\"Please generate feedback and emotional response from the employee regarding the change process.\n        The response should include feedback on the change implementation and the emotional impact on the employee.\n        Also, provide target_ids of managers to whom this feedback should be sent.\n        Return the information in the following JSON format:\n        {\n            \"feedback\": \"<Feedback on the change process>\",\n            \"emotional_response\": \"<Emotional response to the change>\",\n            \"target_ids\": [\"<Manager ID(s) to receive feedback>\"]\n        }\n        \"\"\"\n\n        # Generate reaction using LLM\n        result = await self.generate_reaction(instruction, observation)\n\n        # Extract feedback and emotional response\n        feedback = result.get('feedback', None)\n        emotional_response = result.get('emotional_response', None)\n        target_ids = result.get('target_ids', None)\n        if not target_ids:\n            return []  # Return empty list if no target_ids are provided\n        if not isinstance(target_ids, list):\n            target_ids = [target_ids]\n\n        # Update agent's profile with feedback and emotional response\n        self.profile.update_data(\"feedback\", feedback)\n        self.profile.update_data(\"emotional_response\", emotional_response)\n\n        # Prepare and send FeedbackEvent to the specified managers\n        events = []\n        for target_id in target_ids:\n            feedback_event = FeedbackEvent(self.profile_id, target_id, self.profile_id, feedback, emotional_response)\n            events.append(feedback_event)\n\n        return events",
          "metadata": {
            "id": 3,
            "name": "respond_to_change",
            "condition": null,
            "description": "The employee responds to the change process, providing feedback and emotional responses.",
            "type": "OR",
            "required_variables": [
              {
                "name": "change_type",
                "type": "string",
                "context": "event",
                "description": "Type of change being implemented"
              },
              {
                "name": "change_goals",
                "type": "string",
                "context": "event",
                "description": "Goals of the change process"
              }
            ],
            "output_updates": [
              {
                "name": "feedback",
                "type": "string",
                "context": "agent",
                "description": "Feedback provided by the employee on the change process"
              },
              {
                "name": "emotional_response",
                "type": "string",
                "context": "agent",
                "description": "Emotional response of the employee to the change"
              }
            ]
          }
        }
      }
    }
  },
  "events": {
    "imports": "from onesim.events import Event\nfrom typing import Any",
    "definitions": {
      "-1": {
        "code": "class StartEvent(Event):\n    def __init__(self,\n        from_agent_id: str,\n        to_agent_id: str,\n        **kwargs: Any\n    ) -> None:\n        super().__init__(from_agent_id=from_agent_id, to_agent_id=to_agent_id, **kwargs)",
        "metadata": {
          "id": -1,
          "from_agent_type": "EnvAgent",
          "from_action_name": "start",
          "to_agent_type": "LeaderAgent",
          "to_action_name": "initiate_change_process",
          "from_action_id": 0,
          "to_action_id": 1,
          "event_name": "StartEvent",
          "event_info": "Initial trigger for organizational change",
          "fields": []
        }
      },
      "1": {
        "code": "class ChangeInitiatedEvent(Event):\n    def __init__(self,\n        from_agent_id: str,\n        to_agent_id: str,\n        change_type: str = 'incremental',\n        change_goals: str = \"\",\n        leader_id: str = \"\",\n        **kwargs: Any\n    ) -> None:\n        super().__init__(from_agent_id=from_agent_id, to_agent_id=to_agent_id, **kwargs)\n        self.change_type = change_type\n        self.change_goals = change_goals\n        self.leader_id = leader_id",
        "metadata": {
          "id": 1,
          "from_agent_type": "LeaderAgent",
          "from_action_name": "initiate_change_process",
          "to_agent_type": "ManagerAgent",
          "to_action_name": "execute_change_plan",
          "from_action_id": 1,
          "to_action_id": 2,
          "event_name": "ChangeInitiatedEvent",
          "event_info": "Leader initiates the change process and communicates goals",
          "fields": [
            {
              "name": "change_type",
              "type": "string",
              "default_value": "incremental",
              "description": "Type of change being initiated (incremental, rapid, strategic)"
            },
            {
              "name": "change_goals",
              "type": "string",
              "default_value": "",
              "description": "Goals of the change process"
            },
            {
              "name": "leader_id",
              "type": "string",
              "default_value": "",
              "description": "Identifier of the leader initiating the change"
            }
          ]
        }
      },
      "2": {
        "code": "class ChangeExecutionEvent(Event):\n    def __init__(self,\n        from_agent_id: str,\n        to_agent_id: str,\n        manager_id: str,\n        execution_plan: str = \"\",\n        **kwargs: Any\n    ) -> None:\n        super().__init__(from_agent_id=from_agent_id, to_agent_id=to_agent_id, **kwargs)\n        self.manager_id = manager_id\n        self.execution_plan = execution_plan",
        "metadata": {
          "id": 2,
          "from_agent_type": "ManagerAgent",
          "from_action_name": "execute_change_plan",
          "to_agent_type": "EmployeeAgent",
          "to_action_name": "respond_to_change",
          "from_action_id": 2,
          "to_action_id": 3,
          "event_name": "ChangeExecutionEvent",
          "event_info": "Manager implements change plan and coordinates execution",
          "fields": [
            {
              "name": "manager_id",
              "type": "string",
              "default_value": "",
              "description": "Identifier of the manager executing the change"
            },
            {
              "name": "execution_plan",
              "type": "string",
              "default_value": "",
              "description": "Details of the change execution plan"
            }
          ]
        }
      },
      "3": {
        "code": "class FeedbackEvent(Event):\n    def __init__(self,\n        from_agent_id: str,\n        to_agent_id: str,\n        employee_id: str,\n        feedback: str = \"\",\n        emotional_response: str = 'neutral',\n        **kwargs: Any\n    ) -> None:\n        super().__init__(from_agent_id=from_agent_id, to_agent_id=to_agent_id, **kwargs)\n        self.employee_id = employee_id\n        self.feedback = feedback\n        self.emotional_response = emotional_response",
        "metadata": {
          "id": 3,
          "from_agent_type": "EmployeeAgent",
          "from_action_name": "respond_to_change",
          "to_agent_type": "ManagerAgent",
          "to_action_name": "adjust_change_strategy",
          "from_action_id": 3,
          "to_action_id": 4,
          "event_name": "FeedbackEvent",
          "event_info": "Employee provides feedback on change process",
          "fields": [
            {
              "name": "employee_id",
              "type": "string",
              "default_value": "",
              "description": "Identifier of the employee providing feedback"
            },
            {
              "name": "feedback",
              "type": "string",
              "default_value": "",
              "description": "Feedback provided by the employee"
            },
            {
              "name": "emotional_response",
              "type": "string",
              "default_value": "neutral",
              "description": "Emotional response of the employee to the change"
            }
          ]
        }
      },
      "4": {
        "code": "class StrategyAdjustedEvent(Event):\n    def __init__(self,\n        from_agent_id: str,\n        to_agent_id: str,\n        manager_id: str = \"\",\n        adjusted_strategy: str = \"\",\n        **kwargs: Any\n    ) -> None:\n        super().__init__(from_agent_id=from_agent_id, to_agent_id=to_agent_id, **kwargs)\n        self.manager_id = manager_id\n        self.adjusted_strategy = adjusted_strategy",
        "metadata": {
          "id": 4,
          "from_agent_type": "ManagerAgent",
          "from_action_name": "adjust_change_strategy",
          "to_agent_type": "LeaderAgent",
          "to_action_name": "finalize_change_process",
          "from_action_id": 4,
          "to_action_id": 5,
          "event_name": "StrategyAdjustedEvent",
          "event_info": "Manager adjusts strategy based on employee feedback",
          "fields": [
            {
              "name": "manager_id",
              "type": "string",
              "default_value": "",
              "description": "Identifier of the manager adjusting the strategy"
            },
            {
              "name": "adjusted_strategy",
              "type": "string",
              "default_value": "",
              "description": "Details of the adjusted strategy based on feedback"
            }
          ]
        }
      },
      "5": {
        "code": "class ChangeFinalizedEvent(Event):\n    def __init__(self,\n        from_agent_id: str,\n        to_agent_id: str,\n        leader_id: str = \"\",\n        completion_status: str = 'success',\n        results: str = \"\",\n        **kwargs: Any\n    ) -> None:\n        super().__init__(from_agent_id=from_agent_id, to_agent_id=to_agent_id, **kwargs)\n        self.leader_id = leader_id\n        self.completion_status = completion_status\n        self.results = results",
        "metadata": {
          "id": 5,
          "from_agent_type": "LeaderAgent",
          "from_action_name": "finalize_change_process",
          "to_agent_type": "EnvAgent",
          "to_action_name": "terminate",
          "from_action_id": 5,
          "to_action_id": -1,
          "event_name": "ChangeFinalizedEvent",
          "event_info": "Leader finalizes the change process and reports completion",
          "fields": [
            {
              "name": "leader_id",
              "type": "string",
              "default_value": "",
              "description": "Identifier of the leader finalizing the change"
            },
            {
              "name": "completion_status",
              "type": "string",
              "default_value": "success",
              "description": "Status of the change process completion"
            },
            {
              "name": "results",
              "type": "string",
              "default_value": "",
              "description": "Results and outcomes of the change process"
            }
          ]
        }
      }
    }
  }
}