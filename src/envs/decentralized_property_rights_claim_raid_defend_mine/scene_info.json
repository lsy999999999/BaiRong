{
    "domain": "Economics",
    "scene_name": "decentralized_property_rights_claim_raid_defend_mine",
    "odd_protocol": {
        "overview": {
            "system_goal": "Study decentralized property-rights formation without communication or authority in a homogeneous 10×10 grid economy while maximizing both global cumulative output and individual cumulative output; verify convergence toward equal land shares, declining conflict, stabilizing tenure, and high efficiency (80%–90% of a no-conflict upper bound) even with LLM agent noise.",
            "agent_types": "N homogeneous LLM-driven miner agents (N = 10 or 20 recommended), each with per-round stamina budget S = 10 that resets at the end of each round; each agent outputs per-round JSON keys `claim`, `raid`, `defend`, and `mine` as its action instructions; agents observe current grid occupancy, last-round actions and outcomes, their own stamina S, and the mining cap/payoff function; they cannot communicate and do not know others’ current-round defend/raid plans.",
            "environment_description": "A 10×10 grid of fully homogeneous plots (100 cells) referenced by coordinates [x, y]; recommended indexing is 0–9 for both x and y; all plots are identical in production potential; the resource stock is effectively infinite (R0 → ∞) with non-depleting total stock and fixed per-round extraction caps so no intertemporal depletion dynamics are studied in the baseline.",
            "property_rights_mechanism_summary": "Mechanism #1 (no communication, no authority) with four actions and strict semantics: `claim` spends 1 stamina to occupy currently unowned cells only; multiple simultaneous claims on the same empty cell are resolved via uniform random tie-breaks by default (a pre-set deterministic rule is an optional variant) and losers’ stamina is wasted; `raid` spends 1 stamina to attempt to seize another agent’s owned cell, with success contingent on whether the defender precommitted `defend` for that cell; if no defense, a single raider wins (uniform random among multiple raiders by default or a pre-set rule variant); `defend` spends 1 stamina to precommit defense on cells already owned by the agent and blocks all raids on that cell in that round, consuming stamina even if no raid occurs; `mine` allocates n stamina (0 ≤ n ≤ s_max per cell per round, baseline s_max = 3, q = 1) to owned cells, producing y = n after ownership is finalized that round; only owners can mine their own cells, and only final ownership after claim/raid/defend settlement determines mining eligibility.",
            "time_horizon_and_rounds": "Discrete-time rounds t = 1..R with R recommended in 100–200 and benchmark R = 200.",
            "efficiency_benchmark_definition": "Efficiency is the ratio of actual cumulative output to a theoretical upper bound with no conflict and no wasted stamina, with per-cell mining capped at s_max = 3 and per-agent stamina constraint S = 10; expected realized efficiency is 80%–90% due to stamina spent on claim/raid/defend and tie-break losses.",
            "resource_regime_and_variants": "Baseline is a property-rights establishment stage with R0 approximately infinite, so output is constrained only by the per-cell per-round mining cap (n ≤ 3) and stamina; if the model enters a resource depletion stage variant, production must also respect each cell’s remaining resource balance.",
            "observability_and_information": "Per round, agents can see current grid occupancy and last-round conflicts and outcomes, along with their stamina S and mining parameters; agents do not know others’ current-round defense and raid choices, creating information asymmetry and risk for `raid` decisions.",
            "units_and_coordinates": "Coordinates are [x, y] over the 10×10 grid with recommended 0–9 indexing; all plots are homogeneous; input and output refer to cells via coordinates that must be valid within the grid; duplicate coordinates submitted within a single key are deduplicated or counted once, and invalid targets are ignored.",
            "randomization_and_replications": "Tie-breaks are resolved uniformly at random by default for multi-claim on the same empty cell and multi-raid on the same undefended cell; a pre-set deterministic tie-break rule is an optional variant; a small amount of randomness may be introduced to break symmetry; random seeds are fixed and varied across at least 30 runs per configuration."
        },
        "design_concepts": {
            "interaction_patterns": "All agents act simultaneously each round by allocating integer stamina across `claim` on empty cells, `raid` on others’ owned cells, `defend` on their own cells, and `mine` on cells they will own after settlement; interactions occur via contested ownership in claims and raids, with defense precommitment blocking raids, plus indirect competition for grid coverage and mining opportunities; conflicts are resolved by defense blocking and uniform random tie-breaks among claimants or raiders when relevant.",
            "communication_protocols": "No communication and no central authority; agents rely exclusively on visible observables and prior history; current-round defense and raid choices of others are hidden, which makes raiding risky.",
            "decision_mechanisms": "Each LLM agent receives a structured textual prompt with its identity, stamina S, compressed grid occupancy, list of owned cells, last-round conflicts and outcomes, mining cap s_max = 3 and output rate q = 1, and a rules summary; it must output a JSON plan with keys `claim`, `raid`, `defend`, and `mine`; the system enforces the stamina budget and validity constraints, deduplicates repeated coordinates or counts them once, ignores invalid targets, and trims or rejects infeasible outputs with randomized rationalization if necessary; embedded heuristics guide behavior: prioritize claiming empty land when plots are available, if raiding becomes necessary focus on the largest landowner’s boundary plots, predominantly mine once holding enough land, and defend core plots when challenged.",
            "action_semantics_and_costs": "`claim` uses 1 stamina per empty-cell coordinate and has no effect on already owned cells; `raid` uses 1 stamina per target and succeeds only if the target cell is not defended that round, with one raider selected if multiple attacks occur; `defend` uses 1 stamina per owned cell precommitted and, if any raids occur, blocks all raids on that cell that round, consuming stamina even if no raid happens; `mine` uses n stamina per listed cell with 0 ≤ n ≤ 3 per cell per round, and yields output y = n given q = 1, limited by s_max; mining is permitted only on final owned cells after ownership settlement, which enables an agent to claim an empty cell and mine it in the same round.",
            "action_submission_and_settlement_order": "Recommended/default unified settlement order is: 1) process `claim` on empty cells and resolve competition for those cells; 2) process `raid` and `defend` for already owned cells, with defense blocking all raids on that cell; 3) process `mine` based on the final ownership resulting from steps 1–2; 4) deduct stamina and compute output; this claim-first order replaces earlier documentation variants that resolved raids/defense before claims in the current stage.",
            "tie_breaking_and_randomization": "Default tie-breaking is uniform random among multiple claimants for the same empty cell and among multiple raiders for the same undefended cell; a deterministic pre-set rule is an optional alternative; seeds are fixed and varied across replications (≥ 30) to enable statistical validation; optional random ordering of conflicts may be applied to break symmetry.",
            "efficiency_and_cost_tradeoffs": "Claim, raid, and defend consume stamina but do not produce gold, and failed claims or unsuccessful raids waste stamina; this reduces attainable efficiency relative to a no-conflict benchmark; the design seeks a steady-state with low conflict rates so more stamina is devoted to mining and system efficiency approaches 80%–90%.",
            "equity_and_correction_dynamics": "Larger landowners face higher marginal raid exposure than small landowners due to opportunistic raiding heuristics and boundary targeting, introducing corrective pressure toward equal land shares; expected dynamics include convergence toward equal shares, declining raid rates, rising defense success rates, and increasing tenure.",
            "observability_limits_and_risk": "Agents cannot observe others’ current-round defense and raid allocations; they act under incomplete information; `raid` decisions are inherently risky due to hidden defense choices, even though current ownership status of each cell is visible.",
            "settlement_order_rationale_and_implications": "By finalizing ownership before mining in the same round under the claim-first then raid/defend order, agents can `claim` an empty cell and immediately `mine` it; defense consumption occurs regardless of attack, emphasizing commitment costs and strategic deterrence."
        },
        "details": {
            "agent_behaviors": "Each round, every miner with stamina S = 10 allocates integer stamina across `claim` of unoccupied cells (1 per coordinate), `raid` of occupied cells (1 per coordinate), `defend` precommitment on its owned cells (1 per coordinate, consumed whether attacked or not), and `mine` on cells it will ultimately own that round (n per coordinate with 0 ≤ n ≤ 3); agents cannot mine cells they do not own, cannot defend others’ cells, and `claim` has no effect on cells they already own; decisions are simultaneous, stamina resets to S at round end, and duplicates within a key are deduplicated or counted once.",
            "decision_algorithms": "LLM-driven policy using a structured prompt and embedded heuristics; the agent outputs JSON fields `claim`, `raid`, `defend`, and `mine` consistent with constraints; the stamina budget rule is strict: count(`claim`) + count(`raid`) + count(`defend`) + sum(`mine.s`) ≤ S; outputs that exceed budget, violate authority, or target invalid coordinates are trimmed or rejected, duplicates are deduplicated or only one instance is kept, and invalid targets are ignored with no production; randomized rationalization may be applied if needed to restore feasibility.",
            "specific_constraints": "Per-cell mining cap s_max = 3 and linear production y = q · min(n, s_max) with q = 1; defense precommitment blocks all raids on that cell in that round if any raids occur; each `claim`, `raid`, and `defend` entry costs exactly 1 stamina; `mine` entries cost `s` stamina each; stamina allocations are integers; stamina resets each round and cannot be carried over; only owners can mine their own cells and only final ownership after settlement counts; coordinates must be valid within the 10×10 grid with recommended 0–9 indexing for x and y; duplicate coordinates in a key are deduplicated or recorded once; invalid actions (e.g., defending someone else’s cell or mining on someone else’s cell) are ignored and produce no output.",
            "round_timeline_full": "1) Observation: agents observe grid occupancy, last-round history, and their stamina S; 2) Decision: agents simultaneously allocate stamina across `claim` (empty cells, 1 each), `raid` (occupied cells, 1 each), `defend` (owned cells, 1 each), and `mine` (owned or to-be-owned cells, with 0 ≤ n ≤ 3 per cell); 3) Settlement step 1: process `claim` on empty cells and resolve multi-claim conflicts via uniform random tie-breakers by default (or a pre-set rule variant), losers’ stamina is wasted; 4) Settlement step 2: process `raid` and `defend` on already owned cells—if a cell is defended, all raids on that cell fail and the defender spends 1 stamina; if undefended and raided by multiple agents, select one uniformly at random by default (or per a pre-set rule) as the new owner; 5) Settlement step 3: process `mine` based on final ownership after steps 1–2, with per-cell yield y = q · min(n, s_max), q = 1, s_max = 3; this enables `claim`-then-`mine` within the same round; 6) Settlement step 4: deduct stamina for all actions and compute round output; 7) End: full logging and metrics updates, stamina reset to S for all agents.",
            "ownership_and_transfer_rules": "Claiming an unoccupied cell assigns ownership that round at a cost of 1 stamina; defending is a precommitment at 1 stamina and blocks all raids if any occur; if an undefended cell is raided, one challenger is selected (uniform random by default) to become the new owner; ownership persists across rounds unless successfully raided; writing owned coordinates into `claim` has no effect and is ignored.",
            "tie_breaking_policy_details": "When multiple agents `claim` the same empty cell, one is selected by uniform random tie-breaker by default (a pre-set deterministic rule is permitted as a variant); when multiple agents `raid` the same undefended cell, one is selected by uniform random tie-breaker by default (a pre-set deterministic rule is permitted as a variant); randomness is controlled by fixed seeds and varied across at least 30 independent runs to support replication.",
            "validation_and_parsing_policy": "The system enforces coordinate validity and the stamina budget; duplicate coordinates within a given key are deduplicated or counted once; attempts to defend cells not owned, claim already owned cells, or mine cells not finally owned are ignored with no output; infeasible outputs may be trimmed or rejected with randomized rationalization to restore feasibility.",
            "stamina_accounting_and_reset": "Per-round stamina S = 10 is the hard budget for `claim`, `raid`, and `defend` counts plus the sum of all `mine.s`; stamina is deducted after settlement as part of step 4, with `defend` consuming stamina regardless of whether a raid occurred; stamina resets to S at the end of each round and cannot be accumulated across rounds.",
            "production_and_yields": "Mining yields gold linearly at q = 1 per unit of mining stamina up to s_max = 3 per cell per round; raiding, claiming, and defending do not directly produce gold but do consume stamina and may cause wasted stamina if unsuccessful.",
            "metrics_and_acceptance_criteria": "Equity: final land share distribution with mean 100/N; compute Gini, HHI, and KL divergence against uniform; acceptance thresholds include Gini ≤ 0.10 and at least 80% of players with share within [0.8/N, 1.2/N]; Stability: declining turnover rate, increasing average and P50/P75 tenure, rising and stabilizing defense success rate; Conflict: raiding rate declines and stabilizes, and large owners face higher marginal raid probability than small owners; Efficiency: actual cumulative output divided by the theoretical no-conflict upper bound approaches 80%–90%.",
            "logging_and_analysis_plan": "Per-round logs record for each agent and cell: allocations (`claim`/`raid`/`defend`/`mine`), conflict pairs, winners/losers, whether defense triggered, outputs, shares, and wasted stamina; statistical tests include chi-square or KS tests of share distribution against uniform across repeated experiments; trend analyses via OLS or non-parametric tests verify declining conflict and increasing tenure; visualizations include share boxplots/time series, conflict heatmaps, tenure histograms, and efficiency curves.",
            "parameterization_and_defaults": "Baseline parameters: grid size = 100 (10×10), N = 10 and N = 20, R = 200, S = 10, s_max = 3, q = 1, `raid` cost = 1, `defend` cost = 1, one defense blocks all challengers per round, tie-breaks uniform by default with an optional pre-set rule variant, fixed random seeds with at least 30 independent runs per configuration.",
            "boundary_targeting_heuristic": "When raiding is necessary, target the largest landowner’s boundary cells (cells at the periphery of a large owner’s cluster, typically adjacent to non-owned or differently owned cells) as a strategy heuristic in the decision prompt; this is not enforced by the mechanism.",
            "efficiency_context_and_wasted_stamina": "Stamina spent on claim/raid/defend that does not yield gold is logged as wasted stamina and contributes to the efficiency gap from the no-conflict frontier.",
            "mnemonic_for_actions": "One-line memory aid: `claim` occupies empty land; `raid` seizes others’ land; `defend` protects your own land; `mine` spends stamina to extract gold from your own land each round (per cell ≤ 3).",
            "indexing_convention": "Coordinates use [x, y] with recommended 0–9 indexing for both axes; all coordinate submissions must be within bounds."
        }
    },
    "agent_types": {
        "MinerAgent": "LLM-driven decision-maker that allocates stamina across claim, raid, defend, and mine each round based on observables and embedded heuristics to maximize cumulative output under the rules and budget.",
        "ActionValidatorAgent": "Parses miner JSON plans, enforces stamina budgets and coordinate validity, deduplicates targets, and trims or rejects infeasible outputs with randomized rationalization to restore feasibility.",
        "AdjudicatorAgent": "Neutral mechanism agent that settles actions in order (claim → raid/defend → mine), applies defense rules, resolves tie-breaks, updates ownership, deducts stamina, and computes production.",
        "GridManagerAgent": "Maintains the 10×10 grid state and ownership, validates coordinates, exposes observables to agents, and tracks per-cell resource balances if a depletion variant is enabled.",
        "RandomizationAgent": "Manages fixed random seeds and supplies uniform tie-breaking and optional symmetry-breaking randomness across runs to ensure reproducibility.",
        "MetricsAgent": "Computes efficiency versus the no-conflict upper bound and equity, stability, and conflict metrics (e.g., Gini, HHI, KL), checking acceptance thresholds across replications.",
        "LoggerAgent": "Records per-round actions, conflicts, outcomes, ownership changes, outputs, and wasted stamina, providing structured logs for statistical tests and visualizations."
    },
    "portrait": {
        "MinerAgent": 3,
        "ActionValidatorAgent": 4,
        "AdjudicatorAgent": 1,
        "GridManagerAgent": 1,
        "RandomizationAgent": 2,
        "MetricsAgent": 2,
        "LoggerAgent": 5
    }
}