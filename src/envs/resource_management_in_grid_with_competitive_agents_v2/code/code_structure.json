{
  "agents": {
    "DecisionMaker": {
      "imports": "from typing import Any, List,Optional\nimport json\nimport asyncio\nfrom loguru import logger\nfrom onesim.models import JsonBlockParser\nfrom onesim.agent import GeneralAgent\nfrom onesim.profile import AgentProfile\nfrom onesim.memory import MemoryStrategy\nfrom onesim.planning import PlanningBase\nfrom onesim.events import *\nfrom onesim.relationship import RelationshipManager\nfrom .events import *",
      "handlers": {
        "1": {
          "code": "async def process_request(self, event: Event) -> List[Event]:\n        # No condition check needed\n        # Generate response_data and status\n        response_data = \"Processed response data\"\n        status = \"processed\"\n        # Call generate_reaction to get target_ids\n        instruction = \"\"\"Please select the target_ids as the Communicator agent's ID (target_id=2). \n        The response_data and status are already generated as \"Processed response data\" and \"processed\" respectively.\"\"\"\n        result = await self.generate_reaction(instruction)\n        target_ids = result.get('target_ids', [])\n        if not isinstance(target_ids, list):\n            target_ids = [target_ids]\n        # Create and send the RequestProcessedEvent\n        events = []\n        for target_id in target_ids:\n            event = RequestProcessedEvent(self.profile_id, target_id, response_data, status)\n            events.append(event)\n        return events",
          "metadata": {
            "id": 1,
            "name": "process_request",
            "condition": null,
            "description": "Processes the initial request, prepares the response data, and marks the request as processed.",
            "type": "OR",
            "required_variables": [],
            "output_updates": [
              {
                "name": "response_data",
                "type": "string",
                "context": "agent",
                "description": "The data content ready to be sent as a response"
              },
              {
                "name": "status",
                "type": "string",
                "context": "agent",
                "description": "Indicates the processing status of the request"
              }
            ],
            "code": ""
          }
        }
      }
    },
    "Communicator": {
      "imports": "from typing import Any, List,Optional\nimport json\nimport asyncio\nfrom loguru import logger\nfrom onesim.models import JsonBlockParser\nfrom onesim.agent import GeneralAgent\nfrom onesim.profile import AgentProfile\nfrom onesim.memory import MemoryStrategy\nfrom onesim.planning import PlanningBase\nfrom onesim.events import *\nfrom onesim.relationship import RelationshipManager\nfrom .events import *",
      "handlers": {
        "2": {
          "code": "async def send_response(self, event: Event) -> List[Event]:\n        # Condition check: no condition required\n        observation = f\"Request processed with response data: {event.response_data} and status: {event.status}\"\n        instruction = \"\"\"Please generate a reaction for the 'send_response' action. \n        The action requires sending the response data and status to the environment. \n        The target agent is 'ENV' (EnvAgent). \n        Please return the following JSON format:\n        {\n            \"target_ids\": [\"ENV\"]\n        }\n        \"\"\"\n        result = await self.generate_reaction(instruction, observation)\n        target_ids = result.get('target_ids', [])\n        if not isinstance(target_ids, list):\n            target_ids = [target_ids]\n        \n        events = []\n        for target_id in target_ids:\n            # Create ResponseSentEvent with status and response_data from the event\n            response_sent_event = ResponseSentEvent(self.profile_id, target_id, event.status, event.response_data)\n            events.append(response_sent_event)\n        \n        # Update environment data\n        self.env.update_data(\"status\", event.status)\n        self.env.update_data(\"response_data\", event.response_data)\n        \n        return events",
          "metadata": {
            "id": 2,
            "name": "send_response",
            "condition": null,
            "description": "Sends the prepared response to the environment and updates the transmission status.",
            "type": "OR",
            "required_variables": [
              {
                "name": "response_data",
                "type": "string",
                "context": "event",
                "description": "The data content ready to be sent as a response"
              },
              {
                "name": "status",
                "type": "string",
                "context": "event",
                "description": "Indicates the processing status of the request"
              }
            ],
            "output_updates": [
              {
                "name": "status",
                "type": "string",
                "context": "env",
                "description": "Indicates the success status of response transmission"
              },
              {
                "name": "response_data",
                "type": "string",
                "context": "env",
                "description": "The data that was successfully sent to the environment"
              }
            ],
            "code": ""
          }
        }
      }
    }
  },
  "events": {
    "imports": "from onesim.events import Event\nfrom typing import Dict, List, Any        \nfrom datetime import datetime\nfrom typing import Any, List\nfrom datetime import datetime\nfrom onesim.events import Event\nfrom typing import Any, List\nfrom datetime import datetime\nfrom onesim.events import Event\nfrom typing import Any, List\nfrom datetime import datetime\nfrom onesim.events import Event",
    "definitions": {
      "-1": {
        "code": "class StartEvent(Event):\n    def __init__(self,\n        from_agent_id: str,\n        to_agent_id: str,\n        **kwargs: Any\n    ) -> None:\n        super().__init__(from_agent_id=from_agent_id, to_agent_id=to_agent_id, **kwargs)\n\nfrom typing import Any, List\nfrom datetime import datetime\nfrom onesim.events import Event",
        "metadata": {
          "id": -1,
          "from_agent_type": "EnvAgent",
          "from_action_name": "start",
          "to_agent_type": "DecisionMaker",
          "to_action_name": "process_request",
          "from_action_id": 0,
          "to_action_id": 1,
          "event_name": "StartEvent",
          "event_info": "Initial trigger for workflow",
          "fields": [],
          "code": ""
        }
      },
      "1": {
        "code": "class RequestProcessedEvent(Event):\n    def __init__(self,\n        from_agent_id: str,\n        to_agent_id: str,\n        response_data: str,\n        status: str,\n        **kwargs: Any\n    ) -> None:\n        super().__init__(from_agent_id=from_agent_id, to_agent_id=to_agent_id, **kwargs)\n        self.response_data = response_data\n        self.status = status",
        "metadata": {
          "id": 1,
          "from_agent_type": "DecisionMaker",
          "from_action_name": "process_request",
          "to_agent_type": "Communicator",
          "to_action_name": "send_response",
          "from_action_id": 1,
          "to_action_id": 2,
          "event_name": "RequestProcessedEvent",
          "event_info": "Request has been processed and ready to send response",
          "fields": [
            {
              "name": "response_data",
              "type": "string",
              "description": "The data content ready to be sent as a response"
            },
            {
              "name": "status",
              "type": "string",
              "description": "Indicates the processing status of the request"
            }
          ],
          "code": ""
        }
      },
      "2": {
        "code": "class ResponseSentEvent(Event):\n    def __init__(self,\n        from_agent_id: str,\n        to_agent_id: str,\n        status: str,\n        response_data: str,\n        **kwargs: Any\n    ) -> None:\n        super().__init__(from_agent_id=from_agent_id, to_agent_id=to_agent_id, **kwargs)\n        self.status = status\n        self.response_data = response_data\n\nfrom typing import Any, List\nfrom datetime import datetime\nfrom onesim.events import Event",
        "metadata": {
          "id": 2,
          "from_agent_type": "Communicator",
          "from_action_name": "send_response",
          "to_agent_type": "EnvAgent",
          "to_action_name": "terminate",
          "from_action_id": 2,
          "to_action_id": -1,
          "event_name": "ResponseSentEvent",
          "event_info": "Response has been successfully sent, workflow completed",
          "fields": [
            {
              "name": "status",
              "type": "string",
              "description": "Indicates the success status of response transmission"
            },
            {
              "name": "response_data",
              "type": "string",
              "description": "The data that was successfully sent to the environment"
            }
          ],
          "code": ""
        }
      }
    }
  }
}