{
  "agents": {
    "PhysiologicalAgent": {
      "imports": "from typing import Any, List, Optional\nimport json\nimport asyncio\nfrom loguru import logger\nfrom onesim.models import JsonBlockParser\nfrom onesim.agent import GeneralAgent\nfrom onesim.profile import AgentProfile\nfrom onesim.memory import MemoryStrategy\nfrom onesim.planning import PlanningBase\nfrom onesim.events import *\nfrom onesim.relationship import RelationshipManager\nfrom .events import *",
      "handlers": {
        "1": {
          "code": "async def assess_physiological_needs(self, event: Event) -> List[Event]:\n        # Validate event type\n        if event.__class__.__name__ != \"StartEvent\":\n            return []\n\n        # Generate reaction to assess physiological needs\n        instruction = \"\"\"\n        Please assess the physiological needs of the agent and determine the necessary resources required. \n        Return the information in the following JSON format:\n        {\n            \"physiological_needs_status\": \"<Status of physiological needs>\",\n            \"resources_required\": [\"<List of resources required>\"],\n            \"target_ids\": [\"<The string ID(s) of the agent(s) to notify>\"]\n        }\n        \"\"\"\n        observation = \"Initial trigger for physiological needs assessment.\"\n        result = await self.generate_reaction(instruction, observation)\n\n        # Extract results from the LLM response\n        physiological_needs_status = result.get('physiological_needs_status', 'Unknown')\n        resources_required = result.get('resources_required', [])\n        target_ids = result.get('target_ids', [])\n\n        # Ensure target_ids is a list\n        if not isinstance(target_ids, list):\n            target_ids = [target_ids]\n\n        # Update agent's profile with the LLM's assessment results\n        self.profile.update_data(\"physiological_needs_status\", physiological_needs_status)\n        self.profile.update_data(\"resources_required\", resources_required)\n\n        # Prepare and send PhysiologicalNeedsMetEvent to each target\n        events = []\n        for target_id in target_ids:\n            physiological_event = PhysiologicalNeedsMetEvent(\n                from_agent_id=self.profile_id,\n                to_agent_id=target_id,\n                agent_id=self.profile_id,\n                resources_provided=resources_required,\n                satisfaction_level=1.0  # Assuming full satisfaction for simplicity\n            )\n            events.append(physiological_event)\n\n        return events",
          "metadata": {
            "id": 1,
            "name": "assess_physiological_needs",
            "condition": null,
            "description": "Evaluates the current state of an agent's physiological needs and determines the necessary resources required to satisfy these needs.",
            "type": "OR",
            "required_variables": [],
            "output_updates": [
              {
                "name": "physiological_needs_status",
                "type": "str",
                "context": "agent",
                "description": "Updated status of the agent's physiological needs after assessment."
              },
              {
                "name": "resources_required",
                "type": "list",
                "context": "agent",
                "description": "List of resources identified as necessary to meet physiological needs."
              }
            ]
          }
        }
      }
    },
    "SocialAgent": {
      "imports": "from typing import Any, List, Optional\nimport json\nimport asyncio\nfrom loguru import logger\nfrom onesim.models import JsonBlockParser\nfrom onesim.agent import GeneralAgent\nfrom onesim.profile import AgentProfile\nfrom onesim.memory import MemoryStrategy\nfrom onesim.planning import PlanningBase\nfrom onesim.events import *\nfrom onesim.relationship import RelationshipManager\nfrom .events import *",
      "handlers": {
        "2": {
          "code": "async def evaluate_social_needs(self, event: Event) -> List[Event]:\n        # Condition Check: No specific condition, proceed with the action\n        # Data Access: Retrieve agent's current social needs status and interactions needed\n        social_needs_status = self.profile.get_data(\"social_needs_status\", \"unknown\")\n        social_interactions_needed = self.profile.get_data(\"social_interactions_needed\", [])\n    \n        # Decision Making: Generate reaction using LLM\n        instruction = \"\"\"Evaluate the agent's social environment and determine if social needs are being met.\n        Return the updated status of social needs, the list of social interactions needed, and target_ids for further actions.\n        Respond in the following JSON format:\n        {\n            \"social_needs_status\": \"<Updated status>\",\n            \"social_interactions_needed\": [\"<List of interactions>\"],\n            \"target_ids\": [\"<Target agent IDs>\"]\n        }\n        \"\"\"\n        observation = f\"Current social needs status: {social_needs_status}, Social interactions needed: {social_interactions_needed}\"\n        \n        result = await self.generate_reaction(instruction, observation)\n        \n        # Parse the LLM's JSON response\n        updated_social_needs_status = result.get(\"social_needs_status\", \"unknown\")\n        updated_social_interactions_needed = result.get(\"social_interactions_needed\", [])\n        target_ids = result.get(\"target_ids\", [])\n        \n        if not isinstance(target_ids, list):\n            target_ids = [target_ids]\n    \n        # Data Modification: Update agent's profile with new social needs status and interactions needed\n        self.profile.update_data(\"social_needs_status\", updated_social_needs_status)\n        self.profile.update_data(\"social_interactions_needed\", updated_social_interactions_needed)\n    \n        # Response Processing: Prepare outgoing events based on evaluation\n        events = []\n        satisfaction_level = 1.0 if updated_social_needs_status == \"satisfied\" else 0.0\n        for target_id in target_ids:\n            social_needs_event = SocialNeedsSatisfiedEvent(\n                from_agent_id=self.profile_id,\n                to_agent_id=target_id,\n                agent_id=self.profile_id,\n                social_interactions=updated_social_interactions_needed,\n                satisfaction_level=satisfaction_level\n            )\n            events.append(social_needs_event)\n    \n        return events",
          "metadata": {
            "id": 2,
            "name": "evaluate_social_needs",
            "condition": null,
            "description": "Analyzes the agent's social environment to determine if social needs are being met through interactions and relationships.",
            "type": "OR",
            "required_variables": [],
            "output_updates": [
              {
                "name": "social_needs_status",
                "type": "str",
                "context": "agent",
                "description": "Updated status of the agent's social needs after evaluation."
              },
              {
                "name": "social_interactions_needed",
                "type": "list",
                "context": "agent",
                "description": "List of social interactions required to satisfy the agent's social needs."
              }
            ]
          }
        }
      }
    },
    "SelfActualizationAgent": {
      "imports": "from typing import Any, List, Optional\nimport asyncio\nfrom loguru import logger\nfrom onesim.models import JsonBlockParser\nfrom onesim.agent import GeneralAgent\nfrom onesim.profile import AgentProfile\nfrom onesim.memory import MemoryStrategy\nfrom onesim.planning import PlanningBase\nfrom onesim.events import *\nfrom onesim.relationship import RelationshipManager\nfrom .events import *",
      "handlers": {
        "3": {
          "code": "async def identify_self_actualization_goals(self, event: Event) -> List[Event]:\n        # Since there is no condition, proceed directly with the handler logic\n\n        # Construct the observation context\n        observation = f\"Current state of agent: {self.profile.get_data('current_state')}\"\n\n        # Construct the instruction for generate_reaction\n        instruction = \"\"\"\n        Identify self-actualization goals based on the agent's current state and aspirations. \n        Please return the information in the following JSON format:\n        {\n            \"self_actualization_goals\": [\"<List of goals identified for the agent's self-actualization>\"],\n            \"self_actualization_status\": \"<Updated status of the agent's progress towards self-actualization>\",\n            \"target_ids\": [\"<A single ID or a list of IDs for the agents involved in the self-actualization process>\"]\n        }\n        \"\"\"\n\n        # Generate the reaction using the instruction and observation\n        result = await self.generate_reaction(instruction, observation)\n\n        # Extract the results from the LLM's response\n        self_actualization_goals = result.get('self_actualization_goals', [])\n        self_actualization_status = result.get('self_actualization_status', '')\n        target_ids = result.get('target_ids', None)\n\n        # Ensure target_ids is a list\n        if not isinstance(target_ids, list):\n            target_ids = [target_ids]\n\n        # Update the agent's profile with new goals and status\n        self.profile.update_data(\"self_actualization_goals\", self_actualization_goals)\n        self.profile.update_data(\"self_actualization_status\", self_actualization_status)\n\n        # Prepare and send the SelfActualizationAchievedEvent to each target\n        events = []\n        for target_id in target_ids:\n            self_actualization_event = SelfActualizationAchievedEvent(\n                from_agent_id=self.profile_id,\n                to_agent_id=target_id,\n                agent_id=self.profile_id,\n                goals_achieved=self_actualization_goals,\n                satisfaction_level=1.0  # Assume full satisfaction for demonstration\n            )\n            events.append(self_actualization_event)\n\n        return events",
          "metadata": {
            "id": 3,
            "name": "identify_self_actualization_goals",
            "condition": null,
            "description": "Identifies and sets goals that align with the agent's self-actualization aspirations, focusing on personal growth and fulfillment.",
            "type": "OR",
            "required_variables": [],
            "output_updates": [
              {
                "name": "self_actualization_goals",
                "type": "list",
                "context": "agent",
                "description": "List of goals identified for the agent's self-actualization."
              },
              {
                "name": "self_actualization_status",
                "type": "str",
                "context": "agent",
                "description": "Updated status of the agent's progress towards self-actualization."
              }
            ]
          }
        }
      }
    },
    "FeedbackAgent": {
      "imports": "from typing import Any, List, Optional\nimport json\nimport asyncio\nfrom loguru import logger\nfrom onesim.models import JsonBlockParser\nfrom onesim.agent import GeneralAgent\nfrom onesim.profile import AgentProfile\nfrom onesim.memory import MemoryStrategy\nfrom onesim.planning import PlanningBase\nfrom onesim.events import *\nfrom onesim.relationship import RelationshipManager\nfrom .events import *",
      "handlers": {
        "4": {
          "code": "async def collect_feedback(self, event: Event) -> List[Event]:\n        event_type = event.__class__.__name__\n\n        # Condition Check Implementation\n        if event_type not in [\"PhysiologicalNeedsMetEvent\", \"SocialNeedsSatisfiedEvent\", \"SelfActualizationAchievedEvent\"]:\n            return []  # Return empty list if the condition is not met\n\n        # Data Access\n        agent_id = event.agent_id\n        satisfaction_level = event.satisfaction_level\n        feedback_data = await self.get_env_data(\"feedback_data\", [])\n\n        # Decision Making\n        observation = f\"Agent ID: {agent_id}, Satisfaction Level: {satisfaction_level}, Event Type: {event_type}\"\n        instruction = \"\"\"Compile feedback based on the satisfaction levels from various events. \n        Please return the information in the following JSON format:\n        \n        {\n        \"feedback_id\": \"<Unique identifier for the feedback>\",\n        \"completion_status\": \"completed\",\n        \"results\": \"<Summary of the feedback processing results>\",\n        \"target_ids\": [\"ENV\"]\n        }\n        \"\"\"\n\n        result = await self.generate_reaction(instruction, observation)\n\n        feedback_id = result.get('feedback_id', \"\")\n        completion_status = result.get('completion_status', \"pending\")\n        results = result.get('results', \"\")\n        target_ids = result.get('target_ids', None)\n\n        if not isinstance(target_ids, list):\n            target_ids = [target_ids]\n\n        # Update environment data\n        feedback_data.append({\n            \"agent_id\": agent_id,\n            \"satisfaction_level\": satisfaction_level,\n            \"event_type\": event_type\n        })\n        self.env.update_data(\"feedback_data\", feedback_data)\n\n        # Prepare and send the FeedbackProcessedEvent to EnvAgent\n        events = []\n        for target_id in target_ids:\n            feedback_event = FeedbackProcessedEvent(\n                from_agent_id=self.profile.profile_id,\n                to_agent_id=target_id,\n                feedback_id=feedback_id,\n                completion_status=completion_status,\n                results=results\n            )\n            events.append(feedback_event)\n\n        return events",
          "metadata": {
            "id": 4,
            "name": "collect_feedback",
            "condition": "Requires input from PhysiologicalNeedsMetEvent, SocialNeedsSatisfiedEvent, SelfActualizationAchievedEvent",
            "description": "Gathers feedback on the satisfaction of various needs from agents, compiling information to inform future actions and adjustments.",
            "type": "OR",
            "required_variables": [
              {
                "name": "agent_id",
                "type": "str",
                "context": "event",
                "description": "Identifier for the agent providing feedback."
              },
              {
                "name": "satisfaction_level",
                "type": "float",
                "context": "event",
                "description": "Degree to which the agent's needs have been satisfied."
              }
            ],
            "output_updates": [
              {
                "name": "feedback_data",
                "type": "list",
                "context": "env",
                "description": "Compiled feedback data from agents regarding need satisfaction."
              }
            ]
          }
        }
      }
    }
  },
  "events": {
    "imports": "from onesim.events import Event\nfrom typing import Any, List\nfrom datetime import datetime",
    "definitions": {
      "-1": {
        "code": "class StartEvent(Event):\n    def __init__(self,\n        from_agent_id: str,\n        to_agent_id: str,\n        **kwargs: Any\n    ) -> None:\n        super().__init__(from_agent_id=from_agent_id, to_agent_id=to_agent_id, **kwargs)",
        "metadata": {
          "id": -1,
          "from_agent_type": "EnvAgent",
          "from_action_name": "start",
          "to_agent_type": "PhysiologicalAgent",
          "to_action_name": "assess_physiological_needs",
          "from_action_id": 0,
          "to_action_id": 1,
          "event_name": "StartEvent",
          "event_info": "Initial trigger for physiological needs assessment",
          "fields": []
        }
      },
      "-2": {
        "code": "class StartEvent(Event):\n    def __init__(self,\n        from_agent_id: str,\n        to_agent_id: str,\n        **kwargs: Any\n    ) -> None:\n        super().__init__(from_agent_id=from_agent_id, to_agent_id=to_agent_id, **kwargs)",
        "metadata": {
          "id": -2,
          "from_agent_type": "EnvAgent",
          "from_action_name": "start",
          "to_agent_type": "SocialAgent",
          "to_action_name": "evaluate_social_needs",
          "from_action_id": 0,
          "to_action_id": 2,
          "event_name": "StartEvent",
          "event_info": "Initial trigger for social needs evaluation",
          "fields": []
        }
      },
      "-3": {
        "code": "class StartEvent(Event):\n    def __init__(self,\n        from_agent_id: str,\n        to_agent_id: str,\n        **kwargs: Any\n    ) -> None:\n        super().__init__(from_agent_id=from_agent_id, to_agent_id=to_agent_id, **kwargs)",
        "metadata": {
          "id": -3,
          "from_agent_type": "EnvAgent",
          "from_action_name": "start",
          "to_agent_type": "SelfActualizationAgent",
          "to_action_name": "identify_self_actualization_goals",
          "from_action_id": 0,
          "to_action_id": 3,
          "event_name": "StartEvent",
          "event_info": "Initial trigger for self-actualization goals identification",
          "fields": []
        }
      },
      "1": {
        "code": "class PhysiologicalNeedsMetEvent(Event):\n    def __init__(self,\n        from_agent_id: str,\n        to_agent_id: str,\n        agent_id: str = \"\",\n        resources_provided: List[Any] = [],\n        satisfaction_level: float = 0.0,\n        **kwargs: Any\n    ) -> None:\n        super().__init__(from_agent_id=from_agent_id, to_agent_id=to_agent_id, **kwargs)\n        self.agent_id = agent_id\n        self.resources_provided = resources_provided\n        self.satisfaction_level = satisfaction_level",
        "metadata": {
          "id": 1,
          "from_agent_type": "PhysiologicalAgent",
          "from_action_name": "assess_physiological_needs",
          "to_agent_type": "FeedbackAgent",
          "to_action_name": "collect_feedback",
          "from_action_id": 1,
          "to_action_id": 4,
          "event_name": "PhysiologicalNeedsMetEvent",
          "event_info": "Event indicating physiological needs have been met",
          "fields": [
            {
              "name": "agent_id",
              "type": "str",
              "default_value": "",
              "description": "Identifier for the agent whose physiological needs have been met"
            },
            {
              "name": "resources_provided",
              "type": "list",
              "default_value": "[]",
              "description": "List of resources provided to meet physiological needs"
            },
            {
              "name": "satisfaction_level",
              "type": "float",
              "default_value": "0.0",
              "description": "Degree to which physiological needs have been satisfied"
            }
          ]
        }
      },
      "2": {
        "code": "class SocialNeedsSatisfiedEvent(Event):\n    def __init__(self,\n        from_agent_id: str,\n        to_agent_id: str,\n        agent_id: str = \"\",\n        social_interactions: List[Any] = [],\n        satisfaction_level: float = 0.0,\n        **kwargs: Any\n    ) -> None:\n        super().__init__(from_agent_id=from_agent_id, to_agent_id=to_agent_id, **kwargs)\n        self.agent_id = agent_id\n        self.social_interactions = social_interactions\n        self.satisfaction_level = satisfaction_level",
        "metadata": {
          "id": 2,
          "from_agent_type": "SocialAgent",
          "from_action_name": "evaluate_social_needs",
          "to_agent_type": "FeedbackAgent",
          "to_action_name": "collect_feedback",
          "from_action_id": 2,
          "to_action_id": 4,
          "event_name": "SocialNeedsSatisfiedEvent",
          "event_info": "Event indicating social needs have been satisfied",
          "fields": [
            {
              "name": "agent_id",
              "type": "str",
              "default_value": "",
              "description": "Identifier for the agent whose social needs have been satisfied"
            },
            {
              "name": "social_interactions",
              "type": "list",
              "default_value": "[]",
              "description": "List of social interactions that contributed to need satisfaction"
            },
            {
              "name": "satisfaction_level",
              "type": "float",
              "default_value": "0.0",
              "description": "Degree to which social needs have been satisfied"
            }
          ]
        }
      },
      "3": {
        "code": "class SelfActualizationAchievedEvent(Event):\n    def __init__(self,\n        from_agent_id: str,\n        to_agent_id: str,\n        agent_id: str = \"\",\n        goals_achieved: List[Any] = [],\n        satisfaction_level: float = 0.0,\n        **kwargs: Any\n    ) -> None:\n        super().__init__(from_agent_id=from_agent_id, to_agent_id=to_agent_id, **kwargs)\n        self.agent_id = agent_id\n        self.goals_achieved = goals_achieved\n        self.satisfaction_level = satisfaction_level",
        "metadata": {
          "id": 3,
          "from_agent_type": "SelfActualizationAgent",
          "from_action_name": "identify_self_actualization_goals",
          "to_agent_type": "FeedbackAgent",
          "to_action_name": "collect_feedback",
          "from_action_id": 3,
          "to_action_id": 4,
          "event_name": "SelfActualizationAchievedEvent",
          "event_info": "Event indicating self-actualization goals have been achieved",
          "fields": [
            {
              "name": "agent_id",
              "type": "str",
              "default_value": "",
              "description": "Identifier for the agent who achieved self-actualization"
            },
            {
              "name": "goals_achieved",
              "type": "list",
              "default_value": "[]",
              "description": "List of self-actualization goals achieved by the agent"
            },
            {
              "name": "satisfaction_level",
              "type": "float",
              "default_value": "0.0",
              "description": "Degree to which self-actualization needs have been satisfied"
            }
          ]
        }
      },
      "4": {
        "code": "class FeedbackProcessedEvent(Event):\n    def __init__(self,\n        from_agent_id: str,\n        to_agent_id: str,\n        feedback_id: str = \"\",\n        completion_status: str = \"pending\",\n        results: str = \"\",\n        **kwargs: Any\n    ) -> None:\n        super().__init__(from_agent_id=from_agent_id, to_agent_id=to_agent_id, **kwargs)\n        self.feedback_id = feedback_id\n        self.completion_status = completion_status\n        self.results = results",
        "metadata": {
          "id": 4,
          "from_agent_type": "FeedbackAgent",
          "from_action_name": "collect_feedback",
          "to_agent_type": "EnvAgent",
          "to_action_name": "terminate",
          "from_action_id": 4,
          "to_action_id": -1,
          "event_name": "FeedbackProcessedEvent",
          "event_info": "Final feedback processed, terminating workflow",
          "fields": [
            {
              "name": "feedback_id",
              "type": "str",
              "default_value": "",
              "description": "Identifier for the feedback processed"
            },
            {
              "name": "completion_status",
              "type": "str",
              "default_value": "pending",
              "description": "Status of the feedback processing, e.g., completed, pending"
            },
            {
              "name": "results",
              "type": "str",
              "default_value": "",
              "description": "Summary of the feedback processing results"
            }
          ]
        }
      }
    }
  }
}