{
  "agents": {
    "Government": {
      "imports": "from typing import Any, List, Optional\nimport json\nimport asyncio\nfrom loguru import logger\nfrom onesim.models import JsonBlockParser\nfrom onesim.agent import GeneralAgent\nfrom onesim.profile import AgentProfile\nfrom onesim.memory import MemoryStrategy\nfrom onesim.planning import PlanningBase\nfrom onesim.events import *\nfrom onesim.relationship import RelationshipManager\nfrom .events import *",
      "handlers": {
        "1": {
          "code": "async def execute_policy(self, event: Event) -> List[Event]:\n        # Retrieve necessary data from agent profile\n        policy_id = self.profile.get_data(\"policy_id\", \"\")\n        current_strength = self.profile.get_data(\"current_strength\", 0.0)\n\n        # Generate efficiency metrics based on current policy strength\n        observation = f\"Policy ID: {policy_id}, Current Strength: {current_strength}\"\n        instruction = \"\"\"\n        Please calculate the efficiency metrics for the policy execution based on the current strength.\n        Return the information in the following JSON format:\n        {\n            \"efficiency_metrics\": \"<Calculated efficiency metrics ranging from 0 to 1>\",\n            \"policy_id\": \"<The string ID of the executed policy>\",\n            \"target_ids\": [\"<The string ID(s) of the Government agent(s) for next action>\"]\n        }\n        \"\"\"\n\n        result = await self.generate_reaction(instruction, observation)\n\n        efficiency_metrics = result.get('efficiency_metrics', None)\n        target_ids = result.get('target_ids', [])\n        if not isinstance(target_ids, list):\n            target_ids = [target_ids]\n\n        # Check if efficiency_metrics is valid before updating\n        if efficiency_metrics is None or not (0 <= efficiency_metrics <= 1):\n            return []\n\n        # Update agent profile with new efficiency metrics\n        self.profile.update_data(\"efficiency_metrics\", efficiency_metrics)\n\n        # Prepare and send PolicyExecutedEvent to the next action\n        events = []\n        for target_id in target_ids:\n            policy_executed_event = PolicyExecutedEvent(self.profile_id, target_id, efficiency_metrics=efficiency_metrics, policy_id=policy_id)\n            events.append(policy_executed_event)\n\n        return events",
          "metadata": {
            "id": 1,
            "name": "execute_policy",
            "condition": null,
            "description": "This action involves the government executing a predefined policy daily, aiming to achieve desired social or economic outcomes.",
            "type": "OR",
            "required_variables": [
              {
                "name": "policy_id",
                "type": "string",
                "context": "agent",
                "description": "Identifier for the policy to be executed"
              },
              {
                "name": "current_strength",
                "type": "float",
                "context": "agent",
                "description": "Current strength level of the policy ranging from 0 to 1"
              }
            ],
            "output_updates": [
              {
                "name": "efficiency_metrics",
                "type": "float",
                "context": "agent",
                "description": "Calculated efficiency of the policy execution ranging from 0 to 1"
              }
            ]
          }
        },
        "2": {
          "code": "async def adjust_policy_strength(self, event: Event) -> List[Event]:\n        # Condition Check Implementation\n        if event.__class__.__name__ != \"PolicyExecutedEvent\":\n            return []\n\n        efficiency_metrics = event.efficiency_metrics\n        policy_id = event.policy_id\n\n        if not (0 <= efficiency_metrics <= 1):\n            return []\n\n        # Generate reaction using LLM\n        observation = f\"Efficiency metrics: {efficiency_metrics}, Policy ID: {policy_id}\"\n        instruction = \"\"\"Adjust the strength of the policy based on the efficiency metrics.\n        The efficiency metrics range from 0 to 1, where higher values indicate better efficiency.\n        If efficiency is high, increase policy strength; if low, decrease it.\n        Please return the information in the following JSON format:\n        {\n            \"new_strength\": <Updated strength of the policy>,\n            \"adjustment_reason\": \"<Reason for the adjustment>\",\n            \"target_ids\": [\"<The ID of the EnvAgent>\"]\n        }\n        \"\"\"\n\n        result = await self.generate_reaction(instruction, observation)\n\n        new_strength = result.get('new_strength', None)\n        adjustment_reason = result.get('adjustment_reason', None)\n        target_ids = result.get('target_ids', None)\n        if not isinstance(target_ids, list):\n            target_ids = [target_ids]\n\n        # Check if new_strength and adjustment_reason are valid before updating\n        if new_strength is None or adjustment_reason is None:\n            return []\n\n        # Update agent's state\n        self.profile.update_data(\"new_strength\", new_strength)\n        self.profile.update_data(\"adjustment_reason\", adjustment_reason)\n\n        # Prepare and send PolicyStrengthAdjustedEvent to EnvAgent\n        events = []\n        for target_id in target_ids:\n            adjusted_event = PolicyStrengthAdjustedEvent(self.profile_id, target_id, new_strength, adjustment_reason)\n            events.append(adjusted_event)\n\n        return events",
          "metadata": {
            "id": 2,
            "name": "adjust_policy_strength",
            "condition": "Efficiency metrics from PolicyExecutedEvent",
            "description": "This action involves adjusting the strength of a policy based on the efficiency results obtained from its execution.",
            "type": "OR",
            "required_variables": [
              {
                "name": "efficiency_metrics",
                "type": "float",
                "context": "event",
                "description": "Efficiency of the policy execution ranging from 0 to 1"
              },
              {
                "name": "policy_id",
                "type": "string",
                "context": "event",
                "description": "Identifier for the executed policy"
              }
            ],
            "output_updates": [
              {
                "name": "new_strength",
                "type": "float",
                "context": "agent",
                "description": "Updated strength of the policy ranging from 0 to 1"
              },
              {
                "name": "adjustment_reason",
                "type": "string",
                "context": "agent",
                "description": "Reason for the policy strength adjustment"
              }
            ]
          }
        }
      }
    },
    "Citizens": {
      "imports": "from typing import Any, List, Optional\nimport json\nimport asyncio\nfrom loguru import logger\nfrom onesim.models import JsonBlockParser\nfrom onesim.agent import GeneralAgent\nfrom onesim.profile import AgentProfile\nfrom onesim.memory import MemoryStrategy\nfrom onesim.planning import PlanningBase\nfrom onesim.events import *\nfrom onesim.relationship import RelationshipManager\nfrom .events import *",
      "handlers": {
        "3": {
          "code": "async def decide_compliance(self, event: Event) -> List[Event]:\n        # Retrieve required agent variables\n        policy_id = self.profile.get_data(\"policy_id\", \"\")\n        acceptance_level = self.profile.get_data(\"acceptance_level\", 0.0)\n\n        # Prepare instruction for LLM\n        instruction = \"\"\"Based on the acceptance level of the policy, generate a compliance decision for the citizens.\n        The compliance level should be a float between 0 and 1, reflecting how much the citizens comply with the policy.\n        Additionally, determine the target_ids, which can be a single ID or a list of IDs, for agents to receive the compliance decision.\n        Please return the information in the following JSON format:\n\n        {\n        \"compliance_level\": <A float between 0 and 1>,\n        \"target_ids\": [\"<The string ID(s) of the target agent(s)>\"]\n        }\n        \"\"\"\n\n        observation = f\"Policy ID: {policy_id}, Acceptance Level: {acceptance_level}\"\n\n        # Generate reaction using LLM\n        result = await self.generate_reaction(instruction, observation)\n\n        compliance_level = result.get('compliance_level', None)\n        target_ids = result.get('target_ids', [])\n        if not isinstance(target_ids, list):\n            target_ids = [target_ids]\n\n        # Update agent's compliance level only if valid\n        if compliance_level is not None and 0 <= compliance_level <= 1:\n            self.profile.update_data(\"compliance_level\", compliance_level)\n\n        # Prepare and send ComplianceDecisionEvent to target agents\n        events = []\n        for target_id in target_ids:\n            compliance_event = ComplianceDecisionEvent(self.profile_id, target_id, compliance_level=compliance_level, policy_id=policy_id)\n            events.append(compliance_event)\n\n        return events",
          "metadata": {
            "id": 3,
            "name": "decide_compliance",
            "condition": null,
            "description": "Citizens evaluate the policy and decide whether to comply based on their acceptance of the policy.",
            "type": "OR",
            "required_variables": [
              {
                "name": "policy_id",
                "type": "string",
                "context": "agent",
                "description": "Identifier for the policy being evaluated"
              },
              {
                "name": "acceptance_level",
                "type": "float",
                "context": "agent",
                "description": "Level of acceptance of the policy ranging from 0 to 1"
              }
            ],
            "output_updates": [
              {
                "name": "compliance_level",
                "type": "float",
                "context": "agent",
                "description": "Level of compliance decided by citizens ranging from 0 to 1"
              }
            ]
          }
        },
        "4": {
          "code": "async def adjust_satisfaction(self, event: Event) -> List[Event]:\n        # Condition Check Implementation\n        if event.__class__.__name__ != \"ComplianceDecisionEvent\":\n            return []\n\n        # Data Access\n        compliance_level = event.compliance_level\n        policy_id = event.policy_id\n\n        # Decision Making\n        observation = f\"Compliance Level: {compliance_level}, Policy ID: {policy_id}\"\n        instruction = \"\"\"Based on the compliance level, adjust the citizen's satisfaction level. \n        If compliance is high, increase satisfaction; if low, decrease satisfaction. \n        Determine the 'adjustment_reason' accordingly.\n        Please return the information in the following JSON format:\n\n        {\n        \"satisfaction_level\": <Updated satisfaction level ranging from 0 to 1>,\n        \"adjustment_reason\": \"<Reason for the satisfaction level adjustment>\",\n        \"target_ids\": [\"<The string ID of the EnvAgent>\"]\n        }\n        \"\"\"\n\n        result = await self.generate_reaction(instruction, observation)\n\n        satisfaction_level = result.get('satisfaction_level', None)\n        adjustment_reason = result.get('adjustment_reason', None)\n        target_ids = result.get('target_ids', None)\n        if not isinstance(target_ids, list):\n            target_ids = [target_ids]\n\n        # Data Modification only if valid\n        if satisfaction_level is not None and 0 <= satisfaction_level <= 1:\n            self.profile.update_data(\"satisfaction_level\", satisfaction_level)\n        if adjustment_reason is not None:\n            self.profile.update_data(\"adjustment_reason\", adjustment_reason)\n\n        # Prepare and send SatisfactionAdjustedEvent to the EnvAgent\n        events = []\n        for target_id in target_ids:\n            satisfaction_event = SatisfactionAdjustedEvent(self.profile_id, target_id, satisfaction_level, adjustment_reason)\n            events.append(satisfaction_event)\n\n        return events",
          "metadata": {
            "id": 4,
            "name": "adjust_satisfaction",
            "condition": "Compliance decision from ComplianceDecisionEvent",
            "description": "Citizens adjust their satisfaction level based on their compliance decision and the subsequent impact of the policy.",
            "type": "OR",
            "required_variables": [
              {
                "name": "compliance_level",
                "type": "float",
                "context": "event",
                "description": "Level of citizen compliance ranging from 0 to 1"
              },
              {
                "name": "policy_id",
                "type": "string",
                "context": "event",
                "description": "Identifier for the policy being complied with"
              }
            ],
            "output_updates": [
              {
                "name": "satisfaction_level",
                "type": "float",
                "context": "agent",
                "description": "Updated satisfaction level of citizens ranging from 0 to 1"
              },
              {
                "name": "adjustment_reason",
                "type": "string",
                "context": "agent",
                "description": "Reason for the satisfaction level adjustment"
              }
            ]
          }
        }
      }
    }
  },
  "events": {
    "imports": "from onesim.events import Event\nfrom typing import Dict, List, Any        \nfrom datetime import datetime\nfrom typing import Any, List\nfrom datetime import datetime\nfrom onesim.events import Event\nfrom typing import Any, List\nfrom datetime import datetime\nfrom onesim.events import Event\nfrom typing import Any, List\nfrom datetime import datetime\nfrom onesim.events import Event\nfrom typing import Any, List\nfrom datetime import datetime\nfrom onesim.events import Event\nfrom typing import Any, List\nfrom datetime import datetime\nfrom onesim.events import Event",
    "definitions": {
      "-1": {
        "code": "class StartEvent(Event):\n    def __init__(self,\n        from_agent_id: str,\n        to_agent_id: str,\n        **kwargs: Any\n    ) -> None:\n        super().__init__(from_agent_id=from_agent_id, to_agent_id=to_agent_id, **kwargs)\n\nfrom typing import Any, List\nfrom datetime import datetime\nfrom onesim.events import Event",
        "metadata": {
          "id": -1,
          "from_agent_type": "EnvAgent",
          "from_action_name": "start",
          "to_agent_type": "Government",
          "to_action_name": "execute_policy",
          "from_action_id": 0,
          "to_action_id": 1,
          "event_name": "StartEvent",
          "event_info": "Initial trigger for policy execution",
          "fields": []
        }
      },
      "-2": {
        "code": "class StartEvent(Event):\n    def __init__(self,\n        from_agent_id: str,\n        to_agent_id: str,\n        **kwargs: Any\n    ) -> None:\n        super().__init__(from_agent_id=from_agent_id, to_agent_id=to_agent_id, **kwargs)\n\nfrom typing import Any, List\nfrom datetime import datetime\nfrom onesim.events import Event",
        "metadata": {
          "id": -2,
          "from_agent_type": "EnvAgent",
          "from_action_name": "start",
          "to_agent_type": "Citizens",
          "to_action_name": "decide_compliance",
          "from_action_id": 0,
          "to_action_id": 3,
          "event_name": "StartEvent",
          "event_info": "Initial trigger for citizen compliance decision",
          "fields": []
        }
      },
      "1": {
        "code": "class PolicyExecutedEvent(Event):\n    def __init__(self,\n        from_agent_id: str,\n        to_agent_id: str,\n        efficiency_metrics: float = 0.0,\n        policy_id: str = \"\",\n        **kwargs: Any\n    ) -> None:\n        super().__init__(from_agent_id=from_agent_id, to_agent_id=to_agent_id, **kwargs)\n        self.efficiency_metrics = efficiency_metrics\n        self.policy_id = policy_id",
        "metadata": {
          "id": 1,
          "from_agent_type": "Government",
          "from_action_name": "execute_policy",
          "to_agent_type": "Government",
          "to_action_name": "adjust_policy_strength",
          "from_action_id": 1,
          "to_action_id": 2,
          "event_name": "PolicyExecutedEvent",
          "event_info": "Results of policy execution, including efficiency metrics",
          "fields": [
            {
              "name": "efficiency_metrics",
              "type": "float",
              "default_value": 0.0,
              "description": "Efficiency of the policy execution ranging from 0 to 1"
            },
            {
              "name": "policy_id",
              "type": "string",
              "default_value": "",
              "description": "Identifier for the executed policy"
            }
          ]
        }
      },
      "2": {
        "code": "class PolicyStrengthAdjustedEvent(Event):\n    def __init__(self,\n        from_agent_id: str,\n        to_agent_id: str,\n        new_strength: float = 0.0,\n        adjustment_reason: str = \"\",\n        **kwargs: Any\n    ) -> None:\n        super().__init__(from_agent_id=from_agent_id, to_agent_id=to_agent_id, **kwargs)\n        self.new_strength = new_strength\n        self.adjustment_reason = adjustment_reason\n\nfrom typing import Any, List\nfrom datetime import datetime\nfrom onesim.events import Event",
        "metadata": {
          "id": 2,
          "from_agent_type": "Government",
          "from_action_name": "adjust_policy_strength",
          "to_agent_type": "EnvAgent",
          "to_action_name": "terminate",
          "from_action_id": 2,
          "to_action_id": -1,
          "event_name": "PolicyStrengthAdjustedEvent",
          "event_info": "Final adjustment results of policy strength",
          "fields": [
            {
              "name": "new_strength",
              "type": "float",
              "default_value": 0.0,
              "description": "Adjusted strength of the policy ranging from 0 to 1"
            },
            {
              "name": "adjustment_reason",
              "type": "string",
              "default_value": "",
              "description": "Reason for the policy strength adjustment"
            }
          ]
        }
      },
      "3": {
        "code": "class ComplianceDecisionEvent(Event):\n    def __init__(self,\n        from_agent_id: str,\n        to_agent_id: str,\n        compliance_level: float = 0.0,\n        policy_id: str = \"\",\n        **kwargs: Any\n    ) -> None:\n        super().__init__(from_agent_id=from_agent_id, to_agent_id=to_agent_id, **kwargs)\n        self.compliance_level = compliance_level\n        self.policy_id = policy_id\n\nfrom typing import Any, List\nfrom datetime import datetime\nfrom onesim.events import Event",
        "metadata": {
          "id": 3,
          "from_agent_type": "Citizens",
          "from_action_name": "decide_compliance",
          "to_agent_type": "Citizens",
          "to_action_name": "adjust_satisfaction",
          "from_action_id": 3,
          "to_action_id": 4,
          "event_name": "ComplianceDecisionEvent",
          "event_info": "Citizen compliance decision outcome",
          "fields": [
            {
              "name": "compliance_level",
              "type": "float",
              "default_value": 0.0,
              "description": "Level of citizen compliance ranging from 0 to 1"
            },
            {
              "name": "policy_id",
              "type": "string",
              "default_value": "",
              "description": "Identifier for the policy being complied with"
            }
          ]
        }
      },
      "4": {
        "code": "class SatisfactionAdjustedEvent(Event):\n    def __init__(self,\n        from_agent_id: str,\n        to_agent_id: str,\n        satisfaction_level: float = 0.0,\n        adjustment_reason: str = \"\",\n        **kwargs: Any\n    ) -> None:\n        super().__init__(from_agent_id=from_agent_id, to_agent_id=to_agent_id, **kwargs)\n        self.satisfaction_level = satisfaction_level\n        self.adjustment_reason = adjustment_reason\n\nfrom typing import Any, List\nfrom datetime import datetime\nfrom onesim.events import Event",
        "metadata": {
          "id": 4,
          "from_agent_type": "Citizens",
          "from_action_name": "adjust_satisfaction",
          "to_agent_type": "EnvAgent",
          "to_action_name": "terminate",
          "from_action_id": 4,
          "to_action_id": -1,
          "event_name": "SatisfactionAdjustedEvent",
          "event_info": "Final satisfaction level of citizens",
          "fields": [
            {
              "name": "satisfaction_level",
              "type": "float",
              "default_value": 0.0,
              "description": "Final satisfaction level of citizens ranging from 0 to 1"
            },
            {
              "name": "adjustment_reason",
              "type": "string",
              "default_value": "",
              "description": "Reason for the satisfaction level adjustment"
            }
          ]
        }
      }
    }
  }
}