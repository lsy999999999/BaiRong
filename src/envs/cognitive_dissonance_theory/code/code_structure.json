{
  "agents": {
    "ActorA": {
      "imports": "from typing import Any, List, Optional\nimport json\nimport asyncio\nfrom loguru import logger\nfrom onesim.models import JsonBlockParser\nfrom onesim.agent import GeneralAgent\nfrom onesim.profile import AgentProfile\nfrom onesim.memory import MemoryStrategy\nfrom onesim.planning import PlanningBase\nfrom onesim.events import *\nfrom onesim.relationship import RelationshipManager\nfrom .events import *",
      "handlers": {
        "1": {
          "code": "async def experience_dissonance(self, event: Event) -> List[Event]:\n        # Retrieve the dissonance scenario from the environment\n        dissonance_scenario = await self.get_env_data(\"dissonance_scenario\", \"default_scenario\")\n        \n        # Prepare instruction for the LLM\n        instruction = \"\"\"\n        Actor A is experiencing cognitive dissonance due to a particular scenario. \n        Analyze the scenario and determine the intensity of the dissonance and identify \n        the cause. Please return the information in the following JSON format:\n        \n        {\n        \"dissonance_level\": <A float representing the intensity of the dissonance>,\n        \"dissonance_cause\": \"<A string describing the cause of dissonance>\",\n        \"target_ids\": [\"<The string ID of Observer B>\"]\n        }\n        \"\"\"\n        \n        # Generate the LLM reaction\n        observation = f\"Dissonance scenario: {dissonance_scenario}\"\n        result = await self.generate_reaction(instruction, observation)\n        \n        # Parse the LLM's response\n        dissonance_level = result.get('dissonance_level', 0.0)\n        dissonance_cause = result.get('dissonance_cause', \"\")\n        target_ids = result.get('target_ids', None)\n        \n        # Ensure target_ids is a list\n        if not isinstance(target_ids, list):\n            target_ids = [target_ids]\n        \n        # Update Actor A's profile with dissonance details\n        self.profile.update_data(\"dissonance_level\", dissonance_level)\n        self.profile.update_data(\"dissonance_cause\", dissonance_cause)\n        \n        # Create and send DissonanceExperiencedEvent to Observer B\n        events = []\n        for target_id in target_ids:\n            dissonance_event = DissonanceExperiencedEvent(self.profile_id, target_id, dissonance_level, dissonance_cause)\n            events.append(dissonance_event)\n        \n        return events",
          "metadata": {
            "id": 1,
            "name": "experience_dissonance",
            "condition": null,
            "description": "This action involves Actor A experiencing cognitive dissonance, a psychological state where conflicting beliefs, attitudes, or behaviors cause discomfort.",
            "type": "OR",
            "required_variables": [
              {
                "name": "dissonance_scenario",
                "type": "str",
                "context": "env",
                "description": "The scenario or context which triggers cognitive dissonance in Actor A."
              }
            ],
            "output_updates": [
              {
                "name": "dissonance_level",
                "type": "float",
                "context": "agent",
                "description": "The intensity of cognitive dissonance experienced by Actor A."
              },
              {
                "name": "dissonance_cause",
                "type": "str",
                "context": "agent",
                "description": "The cause or reason for the cognitive dissonance experienced by Actor A."
              }
            ]
          }
        },
        "2": {
          "code": "async def decide_strategy(self, event: Event) -> List[Event]:\n        # Condition Check: Ensure feedback from Observer B is received\n        if event.__class__.__name__ != \"FeedbackProvidedEvent\":\n            return []\n        \n        # Retrieve necessary data from agent and event context\n        dissonance_level = self.profile.get_data(\"dissonance_level\", 0.0)\n        dissonance_cause = self.profile.get_data(\"dissonance_cause\", \"\")\n        feedback_content = event.feedback_content\n        feedback_quality = event.feedback_quality\n        \n        # Generate reaction to decide strategy using LLM\n        instruction = \"\"\"Decide on a strategy to reduce cognitive dissonance based on the following inputs:\n        - Dissonance Level: {dissonance_level}\n        - Dissonance Cause: {dissonance_cause}\n        - Feedback Content: {feedback_content}\n        - Feedback Quality: {feedback_quality}\n        Choose between belief change, behavior change, or rationalization.\n        Return the decision in the following JSON format:\n        {\n        \"strategy_type\": \"<The type of strategy chosen>\",\n        \"expected_outcome\": \"<Expected outcome of the chosen strategy>\",\n        \"target_ids\": [\"<The ID(s) of Feedbacker C for evaluation>\"]\n        }\n        \"\"\".format(dissonance_level=dissonance_level, dissonance_cause=dissonance_cause,\n                   feedback_content=feedback_content, feedback_quality=feedback_quality)\n        \n        result = await self.generate_reaction(instruction)\n        \n        # Parse the LLM's response\n        strategy_type = result.get('strategy_type', 'none')\n        expected_outcome = result.get('expected_outcome', '')\n        target_ids = result.get('target_ids', [])\n        if not isinstance(target_ids, list):\n            target_ids = [target_ids]\n        \n        # Update agent data with strategy decision\n        self.profile.update_data(\"strategy_type\", strategy_type)\n        self.profile.update_data(\"expected_outcome\", expected_outcome)\n        \n        # Prepare and send StrategyDecidedEvent to Feedbacker C\n        events = []\n        for target_id in target_ids:\n            strategy_event = StrategyDecidedEvent(self.profile_id, target_id, strategy_type, expected_outcome)\n            events.append(strategy_event)\n        \n        return events",
          "metadata": {
            "id": 2,
            "name": "decide_strategy",
            "condition": "Feedback from Observer B received",
            "description": "Actor A decides on a strategy to reduce cognitive dissonance, choosing between belief change, behavior change, or rationalization.",
            "type": "AND",
            "required_variables": [
              {
                "name": "dissonance_level",
                "type": "float",
                "context": "agent",
                "description": "The intensity of cognitive dissonance that Actor A needs to address."
              },
              {
                "name": "dissonance_cause",
                "type": "str",
                "context": "agent",
                "description": "The cause of the cognitive dissonance that influences strategy selection."
              },
              {
                "name": "feedback_content",
                "type": "str",
                "context": "event",
                "description": "The feedback provided by Observer B regarding the dissonance."
              },
              {
                "name": "feedback_quality",
                "type": "int",
                "context": "event",
                "description": "A rating of the quality of feedback provided by Observer B."
              }
            ],
            "output_updates": [
              {
                "name": "strategy_type",
                "type": "str",
                "context": "agent",
                "description": "The type of strategy selected by Actor A to reduce dissonance."
              },
              {
                "name": "expected_outcome",
                "type": "str",
                "context": "agent",
                "description": "The expected outcome of the strategy chosen by Actor A."
              }
            ]
          }
        }
      }
    },
    "ObserverB": {
      "imports": "from typing import Any, List\nimport asyncio\nfrom onesim.agent import GeneralAgent\nfrom onesim.profile import AgentProfile\nfrom onesim.memory import MemoryStrategy\nfrom onesim.planning import PlanningBase\nfrom onesim.events import Event\nfrom onesim.relationship import RelationshipManager\nfrom .events import FeedbackProvidedEvent, DissonanceExperiencedEvent",
      "handlers": {
        "3": {
          "code": "async def observe_and_provide_feedback(self, event: Event) -> List[Event]:\n        # Condition Check: Ensure the event is of type DissonanceExperiencedEvent\n        if not isinstance(event, DissonanceExperiencedEvent):\n            return []\n    \n        # Retrieve required variables from the event\n        dissonance_level = event.dissonance_level\n        dissonance_cause = event.dissonance_cause\n    \n        # Construct observation for the LLM\n        observation = f\"Dissonance Level: {dissonance_level}, Cause: {dissonance_cause}\"\n    \n        # Define the instruction for LLM to generate feedback content and quality\n        instruction = \"\"\"Please generate feedback content based on the observed dissonance level and cause. \n        The feedback should assist Actor A in selecting a strategy to reduce cognitive dissonance.\n        Return the information in the following JSON format:\n        \n        {\n        \"feedback_content\": \"<Feedback content to assist Actor A>\",\n        \"feedback_quality\": <Quality rating from 1 to 5>,\n        \"target_ids\": [\"<The string ID of Actor A or other agents>\"]\n        }\n        \"\"\"\n    \n        # Generate reaction using LLM\n        result = await self.generate_reaction(instruction, observation)\n    \n        # Parse the LLM's response\n        feedback_content = result.get('feedback_content', \"\")\n        feedback_quality = result.get('feedback_quality', 0)\n        target_ids = result.get('target_ids', [])\n    \n        # Ensure target_ids is a list\n        if not isinstance(target_ids, list):\n            target_ids = [target_ids]\n    \n        # Prepare and send FeedbackProvidedEvent to each target\n        events = []\n        for target_id in target_ids:\n            feedback_event = FeedbackProvidedEvent(self.profile_id, target_id, feedback_content, feedback_quality)\n            events.append(feedback_event)\n    \n        return events",
          "metadata": {
            "id": 3,
            "name": "observe_and_provide_feedback",
            "condition": "DissonanceExperiencedEvent received from Actor A",
            "description": "Observer B observes the dissonance experienced by Actor A and provides feedback to assist in strategy selection.",
            "type": "OR",
            "required_variables": [
              {
                "name": "dissonance_level",
                "type": "float",
                "context": "event",
                "description": "The intensity of cognitive dissonance experienced by Actor A."
              },
              {
                "name": "dissonance_cause",
                "type": "str",
                "context": "event",
                "description": "The cause of the cognitive dissonance experienced by Actor A."
              }
            ],
            "output_updates": [
              {
                "name": "feedback_content",
                "type": "str",
                "context": "agent",
                "description": "The content of the feedback provided to Actor A."
              },
              {
                "name": "feedback_quality",
                "type": "int",
                "context": "agent",
                "description": "A rating of the quality of feedback provided, ranging from 1 to 5."
              }
            ]
          }
        }
      }
    },
    "FeedbackerC": {
      "imports": "from typing import Any, List, Optional\nimport json\nimport asyncio\nfrom loguru import logger\nfrom onesim.models import JsonBlockParser\nfrom onesim.agent import GeneralAgent\nfrom onesim.profile import AgentProfile\nfrom onesim.memory import MemoryStrategy\nfrom onesim.planning import PlanningBase\nfrom onesim.events import *\nfrom onesim.relationship import RelationshipManager\nfrom .events import *",
      "handlers": {
        "4": {
          "code": "async def evaluate_outcome(self, event: Event) -> List[Event]:\n        # Condition check for StrategyDecidedEvent received from Actor A\n        if not isinstance(event, StrategyDecidedEvent):\n            return []\n\n        # Extract required variables from the event\n        strategy_type = event.strategy_type\n        expected_outcome = event.expected_outcome\n\n        # Construct observation and instruction for LLM decision making\n        observation = f\"Strategy Type: {strategy_type}, Expected Outcome: {expected_outcome}\"\n        instruction = \"\"\"Evaluate the effectiveness of Actor A's chosen strategy in reducing cognitive dissonance. \nProvide an evaluation result and completion status. \nDecide the target_ids for sending the EvaluationCompletedEvent. \nReturn the information in the following JSON format:\n\n{\n\"evaluation_result\": \"<The result of the evaluation>\",\n\"completion_status\": \"<The status of the evaluation process>\",\n\"target_ids\": [\"<The string ID(s) of the target agent(s)>\"]\n}\n\"\"\"\n\n        # Generate reaction using LLM\n        result = await self.generate_reaction(instruction, observation)\n\n        # Parse the LLM's JSON response\n        evaluation_result = result.get('evaluation_result', None)\n        completion_status = result.get('completion_status', None)\n        target_ids = result.get('target_ids', None)\n        if not isinstance(target_ids, list):\n            target_ids = [target_ids]\n\n        # Update agent state with evaluation result and completion status\n        self.profile.update_data(\"evaluation_result\", evaluation_result)\n        self.profile.update_data(\"completion_status\", completion_status)\n\n        # Prepare and send EvaluationCompletedEvent to target agent(s)\n        events = []\n        for target_id in target_ids:\n            evaluation_event = EvaluationCompletedEvent(self.profile_id, target_id, evaluation_result, completion_status)\n            events.append(evaluation_event)\n\n        return events",
          "metadata": {
            "id": 4,
            "name": "evaluate_outcome",
            "condition": "StrategyDecidedEvent received from Actor A",
            "description": "Feedbacker C evaluates the outcome of Actor A's chosen strategy to determine its effectiveness in reducing dissonance.",
            "type": "OR",
            "required_variables": [
              {
                "name": "strategy_type",
                "type": "str",
                "context": "event",
                "description": "The type of strategy Actor A decided to use."
              },
              {
                "name": "expected_outcome",
                "type": "str",
                "context": "event",
                "description": "The expected outcome of the strategy chosen by Actor A."
              }
            ],
            "output_updates": [
              {
                "name": "evaluation_result",
                "type": "str",
                "context": "agent",
                "description": "The result of the evaluation performed by Feedbacker C."
              },
              {
                "name": "completion_status",
                "type": "str",
                "context": "agent",
                "description": "The status of the evaluation process, e.g., complete or incomplete."
              }
            ]
          }
        }
      }
    }
  },
  "events": {
    "imports": "from onesim.events import Event\nfrom typing import Any",
    "definitions": {
      "-1": {
        "code": "class StartEvent(Event):\n    def __init__(self,\n        from_agent_id: str,\n        to_agent_id: str,\n        **kwargs: Any\n    ) -> None:\n        super().__init__(from_agent_id=from_agent_id, to_agent_id=to_agent_id, **kwargs)",
        "metadata": {
          "id": -1,
          "from_agent_type": "EnvAgent",
          "from_action_name": "start",
          "to_agent_type": "ActorA",
          "to_action_name": "experience_dissonance",
          "from_action_id": 0,
          "to_action_id": 1,
          "event_name": "StartEvent",
          "event_info": "Initial trigger for Actor A to experience cognitive dissonance",
          "fields": []
        }
      },
      "1": {
        "code": "class DissonanceExperiencedEvent(Event):\n    def __init__(self,\n        from_agent_id: str,\n        to_agent_id: str,\n        dissonance_level: float = 0.0,\n        dissonance_cause: str = \"\",\n        **kwargs: Any\n    ) -> None:\n        super().__init__(from_agent_id=from_agent_id, to_agent_id=to_agent_id, **kwargs)\n        self.dissonance_level = dissonance_level\n        self.dissonance_cause = dissonance_cause",
        "metadata": {
          "id": 1,
          "from_agent_type": "ActorA",
          "from_action_name": "experience_dissonance",
          "to_agent_type": "ObserverB",
          "to_action_name": "observe_and_provide_feedback",
          "from_action_id": 1,
          "to_action_id": 3,
          "event_name": "DissonanceExperiencedEvent",
          "event_info": "Actor A experiences cognitive dissonance and this event is observed by Observer B",
          "fields": [
            {
              "name": "dissonance_level",
              "type": "float",
              "default_value": "0.0",
              "description": "The intensity of cognitive dissonance experienced by Actor A"
            },
            {
              "name": "dissonance_cause",
              "type": "str",
              "default_value": "",
              "description": "The reason or scenario causing the cognitive dissonance"
            }
          ]
        }
      },
      "2": {
        "code": "class StrategyDecidedEvent(Event):\n    def __init__(self,\n        from_agent_id: str,\n        to_agent_id: str,\n        strategy_type: str = 'none',\n        expected_outcome: str = \"\",\n        **kwargs: Any\n    ) -> None:\n        super().__init__(from_agent_id=from_agent_id, to_agent_id=to_agent_id, **kwargs)\n        self.strategy_type = strategy_type\n        self.expected_outcome = expected_outcome",
        "metadata": {
          "id": 2,
          "from_agent_type": "ActorA",
          "from_action_name": "decide_strategy",
          "to_agent_type": "FeedbackerC",
          "to_action_name": "evaluate_outcome",
          "from_action_id": 2,
          "to_action_id": 4,
          "event_name": "StrategyDecidedEvent",
          "event_info": "Actor A decides on a strategy to reduce dissonance and sends it to Feedbacker C for evaluation",
          "fields": [
            {
              "name": "strategy_type",
              "type": "str",
              "default_value": "none",
              "description": "The type of strategy Actor A decides to use (belief change, behavior change, rationalization)"
            },
            {
              "name": "expected_outcome",
              "type": "str",
              "default_value": "",
              "description": "The expected outcome of the strategy chosen by Actor A"
            }
          ]
        }
      },
      "3": {
        "code": "class FeedbackProvidedEvent(Event):\n    def __init__(self,\n        from_agent_id: str,\n        to_agent_id: str,\n        feedback_content: str = \"\",\n        feedback_quality: int = 0,\n        **kwargs: Any\n    ) -> None:\n        super().__init__(from_agent_id=from_agent_id, to_agent_id=to_agent_id, **kwargs)\n        self.feedback_content = feedback_content\n        self.feedback_quality = feedback_quality",
        "metadata": {
          "id": 3,
          "from_agent_type": "ObserverB",
          "from_action_name": "observe_and_provide_feedback",
          "to_agent_type": "ActorA",
          "to_action_name": "decide_strategy",
          "from_action_id": 3,
          "to_action_id": 2,
          "event_name": "FeedbackProvidedEvent",
          "event_info": "Observer B provides feedback to Actor A on the dissonance experienced",
          "fields": [
            {
              "name": "feedback_content",
              "type": "str",
              "default_value": "",
              "description": "The content of the feedback provided by Observer B to Actor A"
            },
            {
              "name": "feedback_quality",
              "type": "int",
              "default_value": "0",
              "description": "A rating of the quality of feedback given, ranging from 1 to 5"
            }
          ]
        }
      },
      "4": {
        "code": "class EvaluationCompletedEvent(Event):\n    def __init__(self,\n        from_agent_id: str,\n        to_agent_id: str,\n        evaluation_result: str = \"\",\n        completion_status: str = 'incomplete',\n        **kwargs: Any\n    ) -> None:\n        super().__init__(from_agent_id=from_agent_id, to_agent_id=to_agent_id, **kwargs)\n        self.evaluation_result = evaluation_result\n        self.completion_status = completion_status",
        "metadata": {
          "id": 4,
          "from_agent_type": "FeedbackerC",
          "from_action_name": "evaluate_outcome",
          "to_agent_type": "EnvAgent",
          "to_action_name": "terminate",
          "from_action_id": 4,
          "to_action_id": -1,
          "event_name": "EvaluationCompletedEvent",
          "event_info": "Feedbacker C evaluates the outcome of Actor A's strategy and completes the process",
          "fields": [
            {
              "name": "evaluation_result",
              "type": "str",
              "default_value": "",
              "description": "The result of the evaluation performed by Feedbacker C"
            },
            {
              "name": "completion_status",
              "type": "str",
              "default_value": "incomplete",
              "description": "The status of the evaluation process, e.g., complete or incomplete"
            }
          ]
        }
      }
    }
  }
}