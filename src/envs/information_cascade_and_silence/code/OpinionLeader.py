from typing import Any, List, Optional
import json
import asyncio
from loguru import logger
from onesim.models import JsonBlockParser
from onesim.agent import GeneralAgent
from onesim.profile import AgentProfile
from onesim.memory import MemoryStrategy
from onesim.planning import PlanningBase
from onesim.events import *
from onesim.relationship import RelationshipManager
from .events import *


class OpinionLeader(GeneralAgent):
    def __init__(self,
                 sys_prompt: str | None = None,
                 model_config_name: str = None,
                 event_bus_queue: asyncio.Queue = None,
                 profile: AgentProfile = None,
                 memory: MemoryStrategy = None,
                 planning: PlanningBase = None,
                 relationship_manager: RelationshipManager = None) -> None:
        super().__init__(sys_prompt, model_config_name, event_bus_queue, profile, memory, planning, relationship_manager)
        self.register_event("StartEvent", "create_content")
        self.register_event("InformationSpreadEvent", "amplify_information")

    async def create_content(self, event: Event) -> List[Event]:
        # Condition check: No condition specified, proceed directly

        # Retrieve the required 'content_creation' variable from agent profile
        content_creation = self.profile.get_data("content_creation", "")

        # Generate content and determine target media organization(s)
        observation = f"Agent content creation: {content_creation}"
        instruction = """You are an opinion leader creating content to influence followers and initiate discussions. 
        Please generate meaningful content for dissemination based on the provided observation. 
        Also, decide which media organization(s) to send the content to for further amplification. 
        Return the information in the following JSON format:

        {
            "content": "<The content generated by the opinion leader>",
            "target_ids": ["<The string ID(s) of the media organization(s)>"]
        }
        Note: target_ids can be a single string ID or a list of IDs."""
    
        result = await self.generate_reaction(instruction, observation)

        # Extract content and target IDs from the LLM's response
        content = result.get("content", "")
        target_ids = result.get("target_ids", [])
        if not isinstance(target_ids, list):
            target_ids = [target_ids]

        # Update the agent's profile with the created content
        self.profile.update_data("created_content", content)

        # Prepare and send the ContentCreatedEvent to the target media organization(s)
        events = []
        for target_id in target_ids:
            content_event = ContentCreatedEvent(self.profile_id, target_id, content=content, media_org_id=target_id)
            events.append(content_event)

        return events

    async def amplify_information(self, event: Event) -> List[Event]:
        # Condition Check: Ensure the information is received from ordinary users
        if event.from_agent_type != "OrdinaryUser":
            return []

        # Extract required data from the incoming event
        information_content = getattr(event, "information_content", "")
        opinion_leader_id = getattr(event, "opinion_leader_id", self.profile_id)

        # Validate the incoming event data
        if not information_content or opinion_leader_id != self.profile_id:
            return []

        # Prepare observation and instruction for decision-making
        observation = f"Information content received: {information_content}"
        instruction = """You are an opinion leader in a social network. 
        Your goal is to amplify the information provided in the observation to increase its reach. 
        Please process the information content and decide on the amplified content. 
        Additionally, determine the target media organization(s) to share the amplified content with. 
        Return the results in the following JSON format:

        {
            "amplified_content": "<Processed and amplified content>",
            "target_ids": ["<List of media organization IDs>"]
        }
        """

        # Generate reaction using the LLM
        result = await self.generate_reaction(instruction, observation)

        # Extract amplified content and target IDs from the response
        amplified_content = result.get("amplified_content", None)
        target_ids = result.get("target_ids", None)
        if not amplified_content or not target_ids:
            return []
        if not isinstance(target_ids, list):
            target_ids = [target_ids]

        # Prepare outgoing events for each target media organization
        events = []
        for target_id in target_ids:
            amplified_event = InformationAmplifiedEvent(
                from_agent_id=self.profile_id,
                to_agent_id=target_id,
                amplified_content=amplified_content
            )
            events.append(amplified_event)

        return events